<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_q_c_p_financial" kind="class" language="C++" prot="public">
    <compoundname>QCPFinancial</compoundname>
    <basecompoundref refid="class_q_c_p_abstract_plottable" prot="public" virt="non-virtual">QCPAbstractPlottable</basecompoundref>
    <includes refid="qcustomplot_8h" local="no">qcustomplot.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="class_q_c_p_financial_1a0f800e21ee98d646dfc6f8f89d10ebfb" prot="public" static="no" strong="no">
        <type></type>
        <name>ChartStyle</name>
        <enumvalue id="class_q_c_p_financial_1a0f800e21ee98d646dfc6f8f89d10ebfba3a516016c9298d3e95dd82aa203c4390" prot="public">
          <name>csOhlc</name>
          <briefdescription>
<para>Open-High-Low-Close bar representation. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="class_q_c_p_financial_1a0f800e21ee98d646dfc6f8f89d10ebfbac803cbd39f26e3f206bcc7028679e62f" prot="public">
          <name>csCandlestick</name>
          <briefdescription>
<para>Candlestick representation. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines the possible representations of OHLC data in the plot.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_financial_1a5a59175d36279d71596e64d7bb65596f" kindref="member">setChartStyle</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3163" column="3" bodyfile="qcustomplot.h" bodystart="3163" bodyend="3165"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="class_q_c_p_financial_1a475f63587ca1077d8c30aaf2b71ae026" prot="protected" static="no" mutable="no">
        <type><ref refid="qcustomplot_8h_1a745c09823fae0974b50beca9bc3b3d7d" kindref="member">QCPFinancialDataMap</ref> *</type>
        <definition>QCPFinancialDataMap* QCPFinancial::mData</definition>
        <argsstring></argsstring>
        <name>mData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3212" column="23" bodyfile="qcustomplot.h" bodystart="3212" bodyend="-1"/>
        <referencedby refid="class_q_c_p_financial_1a1a83396f97fcc68f2b7aa8d9782feffe" compoundref="qcustomplot_8cpp" startline="20805" endline="20808">addData</referencedby>
        <referencedby refid="class_q_c_p_financial_1a11fd49928c33e55e27b7319c6927864a" compoundref="qcustomplot_8cpp" startline="20920" endline="20923">clearData</referencedby>
        <referencedby refid="class_q_c_p_financial_1ad71a59a1b42616594831e04e52c92120" compoundref="qcustomplot_8cpp" startline="21005" endline="21021">draw</referencedby>
        <referencedby refid="class_q_c_p_financial_1a13da88ffd42ad192a672d54f3f233d15" compoundref="qcustomplot_8cpp" startline="21083" endline="21116">getKeyRange</referencedby>
        <referencedby refid="class_q_c_p_financial_1a91c698076647d58223f49e7248d1487e" compoundref="qcustomplot_8cpp" startline="21119" endline="21161">getValueRange</referencedby>
        <referencedby refid="class_q_c_p_financial_1ab74167a55319771c5da0e06406c2c2f2" compoundref="qcustomplot_8cpp" startline="21435" endline="21453">getVisibleDataBounds</referencedby>
        <referencedby refid="class_q_c_p_financial_1a4702d5248feeb9d1ec6e3ce725b10b32" compoundref="qcustomplot_8cpp" startline="20637" endline="20652">QCPFinancial</referencedby>
        <referencedby refid="class_q_c_p_financial_1a048c741d3c8cc5709c2c44b759fdf27c" compoundref="qcustomplot_8cpp" startline="20893" endline="20900">removeData</referencedby>
        <referencedby refid="class_q_c_p_financial_1aa0fcd357005288c833a230c7874825ba" compoundref="qcustomplot_8cpp" startline="20878" endline="20884">removeDataAfter</referencedby>
        <referencedby refid="class_q_c_p_financial_1a097c0383c7c1e9042ca7f93cb439d15a" compoundref="qcustomplot_8cpp" startline="20866" endline="20871">removeDataBefore</referencedby>
        <referencedby refid="class_q_c_p_financial_1a77bffad8f3fcbcccbef03ead1c538e3a" compoundref="qcustomplot_8cpp" startline="20926" endline="20950">selectTest</referencedby>
        <referencedby refid="class_q_c_p_financial_1adf12a86082f1e488df6a4e8603f8fd6d" compoundref="qcustomplot_8cpp" startline="20671" endline="20686">setData</referencedby>
        <referencedby refid="class_q_c_p_financial_1ad1fda0d793797b66819fac4682b10f31" compoundref="qcustomplot_8cpp" startline="20654" endline="20657">~QCPFinancial</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_financial_1ab65c2ce8d6354451870bb44b894c1e92" prot="protected" static="no" mutable="no">
        <type><ref refid="class_q_c_p_financial_1a0f800e21ee98d646dfc6f8f89d10ebfb" kindref="member">ChartStyle</ref></type>
        <definition>ChartStyle QCPFinancial::mChartStyle</definition>
        <argsstring></argsstring>
        <name>mChartStyle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3213" column="14" bodyfile="qcustomplot.h" bodystart="3213" bodyend="-1"/>
        <referencedby refid="class_q_c_p_financial_1ad71a59a1b42616594831e04e52c92120" compoundref="qcustomplot_8cpp" startline="21005" endline="21021">draw</referencedby>
        <referencedby refid="class_q_c_p_financial_1a474a3994b081892f1dbdd1162e055b96" compoundref="qcustomplot_8cpp" startline="21024" endline="21080">drawLegendIcon</referencedby>
        <referencedby refid="class_q_c_p_financial_1a77bffad8f3fcbcccbef03ead1c538e3a" compoundref="qcustomplot_8cpp" startline="20926" endline="20950">selectTest</referencedby>
        <referencedby refid="class_q_c_p_financial_1a5a59175d36279d71596e64d7bb65596f" compoundref="qcustomplot_8cpp" startline="20712" endline="20715">setChartStyle</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_financial_1af630e5eb8485146b9c777e63fd1cf993" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double QCPFinancial::mWidth</definition>
        <argsstring></argsstring>
        <name>mWidth</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3214" column="10" bodyfile="qcustomplot.h" bodystart="3214" bodyend="-1"/>
        <referencedby refid="class_q_c_p_financial_1a6fa1e18f18b37d3a0502b97d864a6d15" compoundref="qcustomplot_8cpp" startline="21359" endline="21417">candlestickSelectTest</referencedby>
        <referencedby refid="class_q_c_p_financial_1a71f5081da0e5ab9c40a488ad40cff122" compoundref="qcustomplot_8cpp" startline="21230" endline="21314">drawCandlestickPlot</referencedby>
        <referencedby refid="class_q_c_p_financial_1a3c3007a7434e29d042c77ccf4f497e66" compoundref="qcustomplot_8cpp" startline="21169" endline="21222">drawOhlcPlot</referencedby>
        <referencedby refid="class_q_c_p_financial_1a13da88ffd42ad192a672d54f3f233d15" compoundref="qcustomplot_8cpp" startline="21083" endline="21116">getKeyRange</referencedby>
        <referencedby refid="class_q_c_p_financial_1a99633f8bac86a61d534ae5eeb1a3068f" compoundref="qcustomplot_8cpp" startline="20722" endline="20725">setWidth</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_financial_1a6afe919190b884d9bac026cefcc8c0a8" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool QCPFinancial::mTwoColored</definition>
        <argsstring></argsstring>
        <name>mTwoColored</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3215" column="8" bodyfile="qcustomplot.h" bodystart="3215" bodyend="-1"/>
        <referencedby refid="class_q_c_p_financial_1a71f5081da0e5ab9c40a488ad40cff122" compoundref="qcustomplot_8cpp" startline="21230" endline="21314">drawCandlestickPlot</referencedby>
        <referencedby refid="class_q_c_p_financial_1a474a3994b081892f1dbdd1162e055b96" compoundref="qcustomplot_8cpp" startline="21024" endline="21080">drawLegendIcon</referencedby>
        <referencedby refid="class_q_c_p_financial_1a3c3007a7434e29d042c77ccf4f497e66" compoundref="qcustomplot_8cpp" startline="21169" endline="21222">drawOhlcPlot</referencedby>
        <referencedby refid="class_q_c_p_financial_1a138e44aac160a17a9676652e240c5f08" compoundref="qcustomplot_8cpp" startline="20736" endline="20739">setTwoColored</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_financial_1ab7e6eed16260a2f88ca6bd940dffea79" prot="protected" static="no" mutable="no">
        <type>QBrush</type>
        <definition>QBrush QCPFinancial::mBrushPositive</definition>
        <argsstring></argsstring>
        <name>mBrushPositive</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3216" column="10" bodyfile="qcustomplot.h" bodystart="3216" bodyend="-1"/>
        <referencedby refid="class_q_c_p_financial_1a71f5081da0e5ab9c40a488ad40cff122" compoundref="qcustomplot_8cpp" startline="21230" endline="21314">drawCandlestickPlot</referencedby>
        <referencedby refid="class_q_c_p_financial_1a474a3994b081892f1dbdd1162e055b96" compoundref="qcustomplot_8cpp" startline="21024" endline="21080">drawLegendIcon</referencedby>
        <referencedby refid="class_q_c_p_financial_1a5ebff2b1764efd07cc44942e67821829" compoundref="qcustomplot_8cpp" startline="20750" endline="20753">setBrushPositive</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_financial_1acb0e31874b7a1deb56bd42e8ab3e68f2" prot="protected" static="no" mutable="no">
        <type>QBrush</type>
        <definition>QBrush QCPFinancial::mBrushNegative</definition>
        <argsstring></argsstring>
        <name>mBrushNegative</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3216" column="25" bodyfile="qcustomplot.h" bodystart="3216" bodyend="-1"/>
        <referencedby refid="class_q_c_p_financial_1a71f5081da0e5ab9c40a488ad40cff122" compoundref="qcustomplot_8cpp" startline="21230" endline="21314">drawCandlestickPlot</referencedby>
        <referencedby refid="class_q_c_p_financial_1a474a3994b081892f1dbdd1162e055b96" compoundref="qcustomplot_8cpp" startline="21024" endline="21080">drawLegendIcon</referencedby>
        <referencedby refid="class_q_c_p_financial_1a8bbdd87629f9144b3ef51af660c0961a" compoundref="qcustomplot_8cpp" startline="20764" endline="20767">setBrushNegative</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_financial_1aa6599186f417ba615caebb3f6c762bd8" prot="protected" static="no" mutable="no">
        <type>QPen</type>
        <definition>QPen QCPFinancial::mPenPositive</definition>
        <argsstring></argsstring>
        <name>mPenPositive</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3217" column="8" bodyfile="qcustomplot.h" bodystart="3217" bodyend="-1"/>
        <referencedby refid="class_q_c_p_financial_1a71f5081da0e5ab9c40a488ad40cff122" compoundref="qcustomplot_8cpp" startline="21230" endline="21314">drawCandlestickPlot</referencedby>
        <referencedby refid="class_q_c_p_financial_1a474a3994b081892f1dbdd1162e055b96" compoundref="qcustomplot_8cpp" startline="21024" endline="21080">drawLegendIcon</referencedby>
        <referencedby refid="class_q_c_p_financial_1a3c3007a7434e29d042c77ccf4f497e66" compoundref="qcustomplot_8cpp" startline="21169" endline="21222">drawOhlcPlot</referencedby>
        <referencedby refid="class_q_c_p_financial_1ac58aa3adc7a35aab0088764b840683e5" compoundref="qcustomplot_8cpp" startline="20778" endline="20781">setPenPositive</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_q_c_p_financial_1a263fbfefde2cc19c8d4024a8319c2bbb" prot="protected" static="no" mutable="no">
        <type>QPen</type>
        <definition>QPen QCPFinancial::mPenNegative</definition>
        <argsstring></argsstring>
        <name>mPenNegative</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3217" column="21" bodyfile="qcustomplot.h" bodystart="3217" bodyend="-1"/>
        <referencedby refid="class_q_c_p_financial_1a71f5081da0e5ab9c40a488ad40cff122" compoundref="qcustomplot_8cpp" startline="21230" endline="21314">drawCandlestickPlot</referencedby>
        <referencedby refid="class_q_c_p_financial_1a474a3994b081892f1dbdd1162e055b96" compoundref="qcustomplot_8cpp" startline="21024" endline="21080">drawLegendIcon</referencedby>
        <referencedby refid="class_q_c_p_financial_1a3c3007a7434e29d042c77ccf4f497e66" compoundref="qcustomplot_8cpp" startline="21169" endline="21222">drawOhlcPlot</referencedby>
        <referencedby refid="class_q_c_p_financial_1afe5c07e94ccea01a75b3a2476993c346" compoundref="qcustomplot_8cpp" startline="20792" endline="20795">setPenNegative</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_q_c_p_financial_1a1cdf9df76adcfae45261690aa0ca2198" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class QCustomPlot</definition>
        <argsstring></argsstring>
        <name>QCustomPlot</name>
        <param>
          <type><ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3232" column="3" bodyfile="qcustomplot.h" bodystart="3232" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_q_c_p_financial_1a8429035e7adfbd7f05805a6530ad5e3b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class QCPLegend</definition>
        <argsstring></argsstring>
        <name>QCPLegend</name>
        <param>
          <type><ref refid="class_q_c_p_legend" kindref="compound">QCPLegend</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3233" column="3" bodyfile="qcustomplot.h" bodystart="3233" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_q_c_p_financial_1a4702d5248feeb9d1ec6e3ce725b10b32" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>QCPFinancial::QCPFinancial</definition>
        <argsstring>(QCPAxis *keyAxis, QCPAxis *valueAxis)</argsstring>
        <name>QCPFinancial</name>
        <param>
          <type><ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref> *</type>
          <declname>keyAxis</declname>
        </param>
        <param>
          <type><ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref> *</type>
          <declname>valueAxis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructs a financial chart which uses <emphasis>keyAxis</emphasis> as its key axis (&quot;x&quot;) and <emphasis>valueAxis</emphasis> as its value axis (&quot;y&quot;). <emphasis>keyAxis</emphasis> and <emphasis>valueAxis</emphasis> must reside in the same <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> instance and not have the same orientation. If either of these restrictions is violated, a corresponding message is printed to the debug output (qDebug), the construction is not aborted, though.</para>
<para>The constructed <ref refid="class_q_c_p_financial" kindref="compound">QCPFinancial</ref> can be added to the plot with <ref refid="class_q_custom_plot_1ab7ad9174f701f9c6f64e378df77927a6" kindref="member">QCustomPlot::addPlottable</ref>, <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> then takes ownership of the financial chart. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3168" column="12" bodyfile="qcustomplot.cpp" bodystart="20637" bodyend="20652"/>
        <references refid="class_q_c_p_financial_1a475f63587ca1077d8c30aaf2b71ae026" compoundref="qcustomplot_8h" startline="3212">mData</references>
        <references refid="class_q_c_p_abstract_plottable_1ae8c816874089f7a44001e8618e81a9dc" compoundref="qcustomplot_8cpp" startline="6948" endline="6951">QCPAbstractPlottable::setSelectedBrush</references>
        <references refid="class_q_c_p_abstract_plottable_1a6911603cad23ab0469b108224517516f" compoundref="qcustomplot_8cpp" startline="6923" endline="6926">QCPAbstractPlottable::setSelectedPen</references>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_financial_1ad1fda0d793797b66819fac4682b10f31" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>QCPFinancial::~QCPFinancial</definition>
        <argsstring>()</argsstring>
        <name>~QCPFinancial</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3169" column="11" bodyfile="qcustomplot.cpp" bodystart="20654" bodyend="20657"/>
        <references refid="class_q_c_p_financial_1a475f63587ca1077d8c30aaf2b71ae026" compoundref="qcustomplot_8h" startline="3212">mData</references>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_financial_1a528c81578e4f25999a9169127763cfd4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="qcustomplot_8h_1a745c09823fae0974b50beca9bc3b3d7d" kindref="member">QCPFinancialDataMap</ref> *</type>
        <definition>QCPFinancialDataMap * QCPFinancial::data</definition>
        <argsstring>() const</argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a pointer to the internal data storage of type <ref refid="qcustomplot_8h_1a745c09823fae0974b50beca9bc3b3d7d" kindref="member">QCPFinancialDataMap</ref>. You may use it to directly manipulate the data, which may be more convenient and faster than using the regular <ref refid="class_q_c_p_financial_1adf12a86082f1e488df6a4e8603f8fd6d" kindref="member">setData</ref> or <ref refid="class_q_c_p_financial_1a1a83396f97fcc68f2b7aa8d9782feffe" kindref="member">addData</ref> methods, in certain situations. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3172" column="23" bodyfile="qcustomplot.h" bodystart="3172" bodyend="3172"/>
        <referencedby refid="class_q_c_p_financial_1a3b6144b48a6a8e63236fc5bf70d40c00" compoundref="qcustomplot_8cpp" startline="20819" endline="20822">addData</referencedby>
        <referencedby refid="class_q_c_p_financial_1adf12a86082f1e488df6a4e8603f8fd6d" compoundref="qcustomplot_8cpp" startline="20671" endline="20686">setData</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_financial_1a5243371c1fde30fdae00555d7760ec2d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_q_c_p_financial_1a0f800e21ee98d646dfc6f8f89d10ebfb" kindref="member">ChartStyle</ref></type>
        <definition>ChartStyle QCPFinancial::chartStyle</definition>
        <argsstring>() const</argsstring>
        <name>chartStyle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3173" column="14" bodyfile="qcustomplot.h" bodystart="3173" bodyend="3173"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_financial_1a12548f13658eda5833204ef60f524870" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double QCPFinancial::width</definition>
        <argsstring>() const</argsstring>
        <name>width</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3174" column="10" bodyfile="qcustomplot.h" bodystart="3174" bodyend="3174"/>
        <referencedby refid="class_q_c_p_financial_1a99633f8bac86a61d534ae5eeb1a3068f" compoundref="qcustomplot_8cpp" startline="20722" endline="20725">setWidth</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_financial_1afd4b51de5be8e53776b649f9877a50e6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool QCPFinancial::twoColored</definition>
        <argsstring>() const</argsstring>
        <name>twoColored</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3175" column="8" bodyfile="qcustomplot.h" bodystart="3175" bodyend="3175"/>
        <referencedby refid="class_q_c_p_financial_1a138e44aac160a17a9676652e240c5f08" compoundref="qcustomplot_8cpp" startline="20736" endline="20739">setTwoColored</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_financial_1ae922e75f3d5b8854369ac0bf1ebfb053" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>QBrush</type>
        <definition>QBrush QCPFinancial::brushPositive</definition>
        <argsstring>() const</argsstring>
        <name>brushPositive</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3176" column="10" bodyfile="qcustomplot.h" bodystart="3176" bodyend="3176"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_financial_1ad4fdc5bc21f5eb17070e043bd4a35f53" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>QBrush</type>
        <definition>QBrush QCPFinancial::brushNegative</definition>
        <argsstring>() const</argsstring>
        <name>brushNegative</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3177" column="10" bodyfile="qcustomplot.h" bodystart="3177" bodyend="3177"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_financial_1ae803fe25fdd6f0acacde4539590795ed" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>QPen</type>
        <definition>QPen QCPFinancial::penPositive</definition>
        <argsstring>() const</argsstring>
        <name>penPositive</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3178" column="8" bodyfile="qcustomplot.h" bodystart="3178" bodyend="3178"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_financial_1a25d9a8f256e5ddcba56b6e2e7e968653" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>QPen</type>
        <definition>QPen QCPFinancial::penNegative</definition>
        <argsstring>() const</argsstring>
        <name>penNegative</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3179" column="8" bodyfile="qcustomplot.h" bodystart="3179" bodyend="3179"/>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_financial_1adf12a86082f1e488df6a4e8603f8fd6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPFinancial::setData</definition>
        <argsstring>(QCPFinancialDataMap *data, bool copy=false)</argsstring>
        <name>setData</name>
        <param>
          <type><ref refid="qcustomplot_8h_1a745c09823fae0974b50beca9bc3b3d7d" kindref="member">QCPFinancialDataMap</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>copy</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Replaces the current data with the provided <emphasis>data</emphasis>.</para>
<para>If <emphasis>copy</emphasis> is set to true, data points in <emphasis>data</emphasis> will only be copied. if false, the plottable takes ownership of the passed data and replaces the internal data pointer with it. This is significantly faster than copying for large datasets.</para>
<para>Alternatively, you can also access and modify the plottable&apos;s data via the <ref refid="class_q_c_p_financial_1a528c81578e4f25999a9169127763cfd4" kindref="member">data</ref> method, which returns a pointer to the internal <ref refid="qcustomplot_8h_1a745c09823fae0974b50beca9bc3b3d7d" kindref="member">QCPFinancialDataMap</ref>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_financial_1a0c3453d1c03e320950fdd2df54e3ebc8" kindref="member">timeSeriesToOhlc</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3183" column="8" bodyfile="qcustomplot.cpp" bodystart="20671" bodyend="20686"/>
        <references refid="class_q_c_p_financial_1a528c81578e4f25999a9169127763cfd4" compoundref="qcustomplot_8h" startline="3172" endline="3172">data</references>
        <references refid="class_q_c_p_financial_1a475f63587ca1077d8c30aaf2b71ae026" compoundref="qcustomplot_8h" startline="3212">mData</references>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_financial_1a886881339d6447432af55adaad748c3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPFinancial::setData</definition>
        <argsstring>(const QVector&lt; double &gt; &amp;key, const QVector&lt; double &gt; &amp;open, const QVector&lt; double &gt; &amp;high, const QVector&lt; double &gt; &amp;low, const QVector&lt; double &gt; &amp;close)</argsstring>
        <name>setData</name>
        <param>
          <type>const QVector&lt; double &gt; &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const QVector&lt; double &gt; &amp;</type>
          <declname>open</declname>
        </param>
        <param>
          <type>const QVector&lt; double &gt; &amp;</type>
          <declname>high</declname>
        </param>
        <param>
          <type>const QVector&lt; double &gt; &amp;</type>
          <declname>low</declname>
        </param>
        <param>
          <type>const QVector&lt; double &gt; &amp;</type>
          <declname>close</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Replaces the current data with the provided open/high/low/close data. The provided vectors should have equal length. Else, the number of added points will be the size of the smallest vector.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_financial_1a0c3453d1c03e320950fdd2df54e3ebc8" kindref="member">timeSeriesToOhlc</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3184" column="8" bodyfile="qcustomplot.cpp" bodystart="20695" bodyend="20707"/>
        <references refid="class_q_c_p_financial_1a475f63587ca1077d8c30aaf2b71ae026" compoundref="qcustomplot_8h" startline="3212">mData</references>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_financial_1a5a59175d36279d71596e64d7bb65596f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPFinancial::setChartStyle</definition>
        <argsstring>(ChartStyle style)</argsstring>
        <name>setChartStyle</name>
        <param>
          <type><ref refid="class_q_c_p_financial_1a0f800e21ee98d646dfc6f8f89d10ebfb" kindref="member">ChartStyle</ref></type>
          <declname>style</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets which representation style shall be used to display the OHLC data. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3185" column="8" bodyfile="qcustomplot.cpp" bodystart="20712" bodyend="20715"/>
        <references refid="class_q_c_p_financial_1ab65c2ce8d6354451870bb44b894c1e92" compoundref="qcustomplot_8h" startline="3213">mChartStyle</references>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_financial_1a99633f8bac86a61d534ae5eeb1a3068f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPFinancial::setWidth</definition>
        <argsstring>(double width)</argsstring>
        <name>setWidth</name>
        <param>
          <type>double</type>
          <declname>width</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the width of the individual bars/candlesticks to <emphasis>width</emphasis> in plot key coordinates.</para>
<para>A typical choice is to set it to (or slightly less than) one bin interval width. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3186" column="8" bodyfile="qcustomplot.cpp" bodystart="20722" bodyend="20725"/>
        <references refid="class_q_c_p_financial_1af630e5eb8485146b9c777e63fd1cf993" compoundref="qcustomplot_8h" startline="3214">mWidth</references>
        <references refid="class_q_c_p_financial_1a12548f13658eda5833204ef60f524870" compoundref="qcustomplot_8h" startline="3174" endline="3174">width</references>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_financial_1a138e44aac160a17a9676652e240c5f08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPFinancial::setTwoColored</definition>
        <argsstring>(bool twoColored)</argsstring>
        <name>setTwoColored</name>
        <param>
          <type>bool</type>
          <declname>twoColored</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets whether this chart shall contrast positive from negative trends per data point by using two separate colors to draw the respective bars/candlesticks.</para>
<para>If <emphasis>twoColored</emphasis> is false, the normal plottable&apos;s pen and brush are used (<ref refid="class_q_c_p_abstract_plottable_1ab74b09ae4c0e7e13142fe4b5bf46cac7" kindref="member">setPen</ref>, <ref refid="class_q_c_p_abstract_plottable_1a7a4b92144dca6453a1f0f210e27edc74" kindref="member">setBrush</ref>).</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_financial_1ac58aa3adc7a35aab0088764b840683e5" kindref="member">setPenPositive</ref>, <ref refid="class_q_c_p_financial_1afe5c07e94ccea01a75b3a2476993c346" kindref="member">setPenNegative</ref>, <ref refid="class_q_c_p_financial_1a5ebff2b1764efd07cc44942e67821829" kindref="member">setBrushPositive</ref>, <ref refid="class_q_c_p_financial_1a8bbdd87629f9144b3ef51af660c0961a" kindref="member">setBrushNegative</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3187" column="8" bodyfile="qcustomplot.cpp" bodystart="20736" bodyend="20739"/>
        <references refid="class_q_c_p_financial_1a6afe919190b884d9bac026cefcc8c0a8" compoundref="qcustomplot_8h" startline="3215">mTwoColored</references>
        <references refid="class_q_c_p_financial_1afd4b51de5be8e53776b649f9877a50e6" compoundref="qcustomplot_8h" startline="3175" endline="3175">twoColored</references>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_financial_1a5ebff2b1764efd07cc44942e67821829" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPFinancial::setBrushPositive</definition>
        <argsstring>(const QBrush &amp;brush)</argsstring>
        <name>setBrushPositive</name>
        <param>
          <type>const QBrush &amp;</type>
          <declname>brush</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If <ref refid="class_q_c_p_financial_1a138e44aac160a17a9676652e240c5f08" kindref="member">setTwoColored</ref> is set to true, this function controls the brush that is used to draw fills of data points with a positive trend (i.e. bars/candlesticks with close &gt;= open).</para>
<para>If <emphasis>twoColored</emphasis> is false, the normal plottable&apos;s pen and brush are used (<ref refid="class_q_c_p_abstract_plottable_1ab74b09ae4c0e7e13142fe4b5bf46cac7" kindref="member">setPen</ref>, <ref refid="class_q_c_p_abstract_plottable_1a7a4b92144dca6453a1f0f210e27edc74" kindref="member">setBrush</ref>).</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_financial_1a8bbdd87629f9144b3ef51af660c0961a" kindref="member">setBrushNegative</ref>, <ref refid="class_q_c_p_financial_1ac58aa3adc7a35aab0088764b840683e5" kindref="member">setPenPositive</ref>, <ref refid="class_q_c_p_financial_1afe5c07e94ccea01a75b3a2476993c346" kindref="member">setPenNegative</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3188" column="8" bodyfile="qcustomplot.cpp" bodystart="20750" bodyend="20753"/>
        <references refid="class_q_c_p_abstract_plottable_1a893b4896dfd92b68b05b2600b80f5826" compoundref="qcustomplot_8h" startline="1415" endline="1415">QCPAbstractPlottable::brush</references>
        <references refid="class_q_c_p_financial_1ab7e6eed16260a2f88ca6bd940dffea79" compoundref="qcustomplot_8h" startline="3216">mBrushPositive</references>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_financial_1a8bbdd87629f9144b3ef51af660c0961a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPFinancial::setBrushNegative</definition>
        <argsstring>(const QBrush &amp;brush)</argsstring>
        <name>setBrushNegative</name>
        <param>
          <type>const QBrush &amp;</type>
          <declname>brush</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If <ref refid="class_q_c_p_financial_1a138e44aac160a17a9676652e240c5f08" kindref="member">setTwoColored</ref> is set to true, this function controls the brush that is used to draw fills of data points with a negative trend (i.e. bars/candlesticks with close &lt; open).</para>
<para>If <emphasis>twoColored</emphasis> is false, the normal plottable&apos;s pen and brush are used (<ref refid="class_q_c_p_abstract_plottable_1ab74b09ae4c0e7e13142fe4b5bf46cac7" kindref="member">setPen</ref>, <ref refid="class_q_c_p_abstract_plottable_1a7a4b92144dca6453a1f0f210e27edc74" kindref="member">setBrush</ref>).</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_financial_1a5ebff2b1764efd07cc44942e67821829" kindref="member">setBrushPositive</ref>, <ref refid="class_q_c_p_financial_1afe5c07e94ccea01a75b3a2476993c346" kindref="member">setPenNegative</ref>, <ref refid="class_q_c_p_financial_1ac58aa3adc7a35aab0088764b840683e5" kindref="member">setPenPositive</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3189" column="8" bodyfile="qcustomplot.cpp" bodystart="20764" bodyend="20767"/>
        <references refid="class_q_c_p_abstract_plottable_1a893b4896dfd92b68b05b2600b80f5826" compoundref="qcustomplot_8h" startline="1415" endline="1415">QCPAbstractPlottable::brush</references>
        <references refid="class_q_c_p_financial_1acb0e31874b7a1deb56bd42e8ab3e68f2" compoundref="qcustomplot_8h" startline="3216">mBrushNegative</references>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_financial_1ac58aa3adc7a35aab0088764b840683e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPFinancial::setPenPositive</definition>
        <argsstring>(const QPen &amp;pen)</argsstring>
        <name>setPenPositive</name>
        <param>
          <type>const QPen &amp;</type>
          <declname>pen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If <ref refid="class_q_c_p_financial_1a138e44aac160a17a9676652e240c5f08" kindref="member">setTwoColored</ref> is set to true, this function controls the pen that is used to draw outlines of data points with a positive trend (i.e. bars/candlesticks with close &gt;= open).</para>
<para>If <emphasis>twoColored</emphasis> is false, the normal plottable&apos;s pen and brush are used (<ref refid="class_q_c_p_abstract_plottable_1ab74b09ae4c0e7e13142fe4b5bf46cac7" kindref="member">setPen</ref>, <ref refid="class_q_c_p_abstract_plottable_1a7a4b92144dca6453a1f0f210e27edc74" kindref="member">setBrush</ref>).</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_financial_1afe5c07e94ccea01a75b3a2476993c346" kindref="member">setPenNegative</ref>, <ref refid="class_q_c_p_financial_1a5ebff2b1764efd07cc44942e67821829" kindref="member">setBrushPositive</ref>, <ref refid="class_q_c_p_financial_1a8bbdd87629f9144b3ef51af660c0961a" kindref="member">setBrushNegative</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3190" column="8" bodyfile="qcustomplot.cpp" bodystart="20778" bodyend="20781"/>
        <references refid="class_q_c_p_financial_1aa6599186f417ba615caebb3f6c762bd8" compoundref="qcustomplot_8h" startline="3217">mPenPositive</references>
        <references refid="class_q_c_p_abstract_plottable_1ad5972efc31344e5a7a78ab4f8864b2d3" compoundref="qcustomplot_8h" startline="1413" endline="1413">QCPAbstractPlottable::pen</references>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_financial_1afe5c07e94ccea01a75b3a2476993c346" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPFinancial::setPenNegative</definition>
        <argsstring>(const QPen &amp;pen)</argsstring>
        <name>setPenNegative</name>
        <param>
          <type>const QPen &amp;</type>
          <declname>pen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If <ref refid="class_q_c_p_financial_1a138e44aac160a17a9676652e240c5f08" kindref="member">setTwoColored</ref> is set to true, this function controls the pen that is used to draw outlines of data points with a negative trend (i.e. bars/candlesticks with close &lt; open).</para>
<para>If <emphasis>twoColored</emphasis> is false, the normal plottable&apos;s pen and brush are used (<ref refid="class_q_c_p_abstract_plottable_1ab74b09ae4c0e7e13142fe4b5bf46cac7" kindref="member">setPen</ref>, <ref refid="class_q_c_p_abstract_plottable_1a7a4b92144dca6453a1f0f210e27edc74" kindref="member">setBrush</ref>).</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_financial_1ac58aa3adc7a35aab0088764b840683e5" kindref="member">setPenPositive</ref>, <ref refid="class_q_c_p_financial_1a8bbdd87629f9144b3ef51af660c0961a" kindref="member">setBrushNegative</ref>, <ref refid="class_q_c_p_financial_1a5ebff2b1764efd07cc44942e67821829" kindref="member">setBrushPositive</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3191" column="8" bodyfile="qcustomplot.cpp" bodystart="20792" bodyend="20795"/>
        <references refid="class_q_c_p_financial_1a263fbfefde2cc19c8d4024a8319c2bbb" compoundref="qcustomplot_8h" startline="3217">mPenNegative</references>
        <references refid="class_q_c_p_abstract_plottable_1ad5972efc31344e5a7a78ab4f8864b2d3" compoundref="qcustomplot_8h" startline="1413" endline="1413">QCPAbstractPlottable::pen</references>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_financial_1a1a83396f97fcc68f2b7aa8d9782feffe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPFinancial::addData</definition>
        <argsstring>(const QCPFinancialDataMap &amp;dataMap)</argsstring>
        <name>addData</name>
        <param>
          <type>const <ref refid="qcustomplot_8h_1a745c09823fae0974b50beca9bc3b3d7d" kindref="member">QCPFinancialDataMap</ref> &amp;</type>
          <declname>dataMap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds the provided data points in <emphasis>dataMap</emphasis> to the current data.</para>
<para>Alternatively, you can also access and modify the data via the <ref refid="class_q_c_p_financial_1a528c81578e4f25999a9169127763cfd4" kindref="member">data</ref> method, which returns a pointer to the internal <ref refid="qcustomplot_8h_1a745c09823fae0974b50beca9bc3b3d7d" kindref="member">QCPFinancialDataMap</ref>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_financial_1a048c741d3c8cc5709c2c44b759fdf27c" kindref="member">removeData</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3194" column="8" bodyfile="qcustomplot.cpp" bodystart="20805" bodyend="20808"/>
        <references refid="class_q_c_p_financial_1a475f63587ca1077d8c30aaf2b71ae026" compoundref="qcustomplot_8h" startline="3212">mData</references>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_financial_1a3b6144b48a6a8e63236fc5bf70d40c00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPFinancial::addData</definition>
        <argsstring>(const QCPFinancialData &amp;data)</argsstring>
        <name>addData</name>
        <param>
          <type>const <ref refid="class_q_c_p_financial_data" kindref="compound">QCPFinancialData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Adds the provided single data point in <emphasis>data</emphasis> to the current data.</para>
<para>Alternatively, you can also access and modify the data via the <ref refid="class_q_c_p_financial_1a528c81578e4f25999a9169127763cfd4" kindref="member">data</ref> method, which returns a pointer to the internal <ref refid="class_q_c_p_financial_data" kindref="compound">QCPFinancialData</ref>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_financial_1a048c741d3c8cc5709c2c44b759fdf27c" kindref="member">removeData</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3195" column="8" bodyfile="qcustomplot.cpp" bodystart="20819" bodyend="20822"/>
        <references refid="class_q_c_p_financial_1a528c81578e4f25999a9169127763cfd4" compoundref="qcustomplot_8h" startline="3172" endline="3172">data</references>
        <references refid="class_q_c_p_financial_1a475f63587ca1077d8c30aaf2b71ae026" compoundref="qcustomplot_8h" startline="3212">mData</references>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_financial_1a688bbd052e00a02954ddb0068b378170" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPFinancial::addData</definition>
        <argsstring>(double key, double open, double high, double low, double close)</argsstring>
        <name>addData</name>
        <param>
          <type>double</type>
          <declname>key</declname>
        </param>
        <param>
          <type>double</type>
          <declname>open</declname>
        </param>
        <param>
          <type>double</type>
          <declname>high</declname>
        </param>
        <param>
          <type>double</type>
          <declname>low</declname>
        </param>
        <param>
          <type>double</type>
          <declname>close</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Adds the provided single data point given by <emphasis>key</emphasis>, <emphasis>open</emphasis>, <emphasis>high</emphasis>, <emphasis>low</emphasis>, and <emphasis>close</emphasis> to the current data.</para>
<para>Alternatively, you can also access and modify the data via the <ref refid="class_q_c_p_financial_1a528c81578e4f25999a9169127763cfd4" kindref="member">data</ref> method, which returns a pointer to the internal <ref refid="class_q_c_p_financial_data" kindref="compound">QCPFinancialData</ref>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_financial_1a048c741d3c8cc5709c2c44b759fdf27c" kindref="member">removeData</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3196" column="8" bodyfile="qcustomplot.cpp" bodystart="20834" bodyend="20837"/>
        <references refid="class_q_c_p_financial_1a475f63587ca1077d8c30aaf2b71ae026" compoundref="qcustomplot_8h" startline="3212">mData</references>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_financial_1aa1abe3bdafb297497f09cdbdc4db3958" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPFinancial::addData</definition>
        <argsstring>(const QVector&lt; double &gt; &amp;key, const QVector&lt; double &gt; &amp;open, const QVector&lt; double &gt; &amp;high, const QVector&lt; double &gt; &amp;low, const QVector&lt; double &gt; &amp;close)</argsstring>
        <name>addData</name>
        <param>
          <type>const QVector&lt; double &gt; &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const QVector&lt; double &gt; &amp;</type>
          <declname>open</declname>
        </param>
        <param>
          <type>const QVector&lt; double &gt; &amp;</type>
          <declname>high</declname>
        </param>
        <param>
          <type>const QVector&lt; double &gt; &amp;</type>
          <declname>low</declname>
        </param>
        <param>
          <type>const QVector&lt; double &gt; &amp;</type>
          <declname>close</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Adds the provided open/high/low/close data to the current data.</para>
<para>Alternatively, you can also access and modify the data via the <ref refid="class_q_c_p_financial_1a528c81578e4f25999a9169127763cfd4" kindref="member">data</ref> method, which returns a pointer to the internal <ref refid="class_q_c_p_financial_data" kindref="compound">QCPFinancialData</ref>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_financial_1a048c741d3c8cc5709c2c44b759fdf27c" kindref="member">removeData</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3197" column="8" bodyfile="qcustomplot.cpp" bodystart="20848" bodyend="20859"/>
        <references refid="class_q_c_p_financial_1a475f63587ca1077d8c30aaf2b71ae026" compoundref="qcustomplot_8h" startline="3212">mData</references>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_financial_1a097c0383c7c1e9042ca7f93cb439d15a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPFinancial::removeDataBefore</definition>
        <argsstring>(double key)</argsstring>
        <name>removeDataBefore</name>
        <param>
          <type>double</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes all data points with keys smaller than <emphasis>key</emphasis>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_financial_1a1a83396f97fcc68f2b7aa8d9782feffe" kindref="member">addData</ref>, <ref refid="class_q_c_p_financial_1a11fd49928c33e55e27b7319c6927864a" kindref="member">clearData</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3198" column="8" bodyfile="qcustomplot.cpp" bodystart="20866" bodyend="20871"/>
        <references refid="class_q_c_p_financial_1a475f63587ca1077d8c30aaf2b71ae026" compoundref="qcustomplot_8h" startline="3212">mData</references>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_financial_1aa0fcd357005288c833a230c7874825ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPFinancial::removeDataAfter</definition>
        <argsstring>(double key)</argsstring>
        <name>removeDataAfter</name>
        <param>
          <type>double</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes all data points with keys greater than <emphasis>key</emphasis>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_financial_1a1a83396f97fcc68f2b7aa8d9782feffe" kindref="member">addData</ref>, <ref refid="class_q_c_p_financial_1a11fd49928c33e55e27b7319c6927864a" kindref="member">clearData</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3199" column="8" bodyfile="qcustomplot.cpp" bodystart="20878" bodyend="20884"/>
        <references refid="class_q_c_p_financial_1a475f63587ca1077d8c30aaf2b71ae026" compoundref="qcustomplot_8h" startline="3212">mData</references>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_financial_1a048c741d3c8cc5709c2c44b759fdf27c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPFinancial::removeData</definition>
        <argsstring>(double fromKey, double toKey)</argsstring>
        <name>removeData</name>
        <param>
          <type>double</type>
          <declname>fromKey</declname>
        </param>
        <param>
          <type>double</type>
          <declname>toKey</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes all data points with keys between <emphasis>fromKey</emphasis> and <emphasis>toKey</emphasis>. if <emphasis>fromKey</emphasis> is greater or equal to <emphasis>toKey</emphasis>, the function does nothing. To remove a single data point with known key, use <ref refid="class_q_c_p_financial_1ae527d8a11290906b083d1ab598c380ea" kindref="member">removeData(double key)</ref>.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_financial_1a1a83396f97fcc68f2b7aa8d9782feffe" kindref="member">addData</ref>, <ref refid="class_q_c_p_financial_1a11fd49928c33e55e27b7319c6927864a" kindref="member">clearData</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3200" column="8" bodyfile="qcustomplot.cpp" bodystart="20893" bodyend="20900"/>
        <references refid="class_q_c_p_financial_1a475f63587ca1077d8c30aaf2b71ae026" compoundref="qcustomplot_8h" startline="3212">mData</references>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_financial_1ae527d8a11290906b083d1ab598c380ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPFinancial::removeData</definition>
        <argsstring>(double key)</argsstring>
        <name>removeData</name>
        <param>
          <type>double</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>Removes a single data point at <emphasis>key</emphasis>. If the position is not known with absolute precision, consider using <ref refid="class_q_c_p_financial_1a048c741d3c8cc5709c2c44b759fdf27c" kindref="member">removeData(double fromKey, double toKey)</ref> with a small fuzziness interval around the suspected position, depeding on the precision with which the key is known.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_financial_1a1a83396f97fcc68f2b7aa8d9782feffe" kindref="member">addData</ref>, <ref refid="class_q_c_p_financial_1a11fd49928c33e55e27b7319c6927864a" kindref="member">clearData</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3201" column="8" bodyfile="qcustomplot.cpp" bodystart="20910" bodyend="20913"/>
        <references refid="class_q_c_p_financial_1a475f63587ca1077d8c30aaf2b71ae026" compoundref="qcustomplot_8h" startline="3212">mData</references>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_financial_1a11fd49928c33e55e27b7319c6927864a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QCPFinancial::clearData</definition>
        <argsstring>()</argsstring>
        <name>clearData</name>
        <reimplements refid="class_q_c_p_abstract_plottable_1a86e5b8fd4b6ff4f4084e7ea4c573fc53">clearData</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes all data points.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_financial_1a048c741d3c8cc5709c2c44b759fdf27c" kindref="member">removeData</ref>, <ref refid="class_q_c_p_financial_1aa0fcd357005288c833a230c7874825ba" kindref="member">removeDataAfter</ref>, <ref refid="class_q_c_p_financial_1a097c0383c7c1e9042ca7f93cb439d15a" kindref="member">removeDataBefore</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3204" column="16" bodyfile="qcustomplot.cpp" bodystart="20920" bodyend="20923"/>
        <references refid="class_q_c_p_financial_1a475f63587ca1077d8c30aaf2b71ae026" compoundref="qcustomplot_8h" startline="3212">mData</references>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_financial_1a77bffad8f3fcbcccbef03ead1c538e3a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double QCPFinancial::selectTest</definition>
        <argsstring>(const QPointF &amp;pos, bool onlySelectable, QVariant *details=0) const</argsstring>
        <name>selectTest</name>
        <reimplements refid="class_q_c_p_abstract_plottable_1a38efe9641d972992a3d44204bc80ec1d">selectTest</reimplements>
        <param>
          <type>const QPointF &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>onlySelectable</declname>
        </param>
        <param>
          <type>QVariant *</type>
          <declname>details</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function is used to decide whether a click hits a layerable object or not.</para>
<para><emphasis>pos</emphasis> is a point in pixel coordinates on the <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> surface. This function returns the shortest pixel distance of this point to the object. If the object is either invisible or the distance couldn&apos;t be determined, -1.0 is returned. Further, if <emphasis>onlySelectable</emphasis> is true and the object is not selectable, -1.0 is returned, too.</para>
<para>If the object is represented not by single lines but by an area like a <ref refid="class_q_c_p_item_text" kindref="compound">QCPItemText</ref> or the bars of a <ref refid="class_q_c_p_bars" kindref="compound">QCPBars</ref> plottable, a click inside the area should also be considered a hit. In these cases this function thus returns a constant value greater zero but still below the parent plot&apos;s selection tolerance. (typically the selectionTolerance multiplied by 0.99).</para>
<para>Providing a constant value for area objects allows selecting line objects even when they are obscured by such area objects, by clicking close to the lines (i.e. closer than 0.99*selectionTolerance).</para>
<para>The actual setting of the selection state is not done by this function. This is handled by the parent <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> when the mouseReleaseEvent occurs, and the finally selected object is notified via the selectEvent/deselectEvent methods.</para>
<para><emphasis>details</emphasis> is an optional output parameter. Every layerable subclass may place any information in <emphasis>details</emphasis>. This information will be passed to <ref refid="class_q_c_p_abstract_plottable_1a16aaad02456aa23a759efd1ac90c79bf" kindref="member">selectEvent</ref> when the parent <ref refid="class_q_custom_plot" kindref="compound">QCustomPlot</ref> decides on the basis of this selectTest call, that the object was successfully selected. The subsequent call to <ref refid="class_q_c_p_abstract_plottable_1a16aaad02456aa23a759efd1ac90c79bf" kindref="member">selectEvent</ref> will carry the <emphasis>details</emphasis>. This is useful for multi-part objects (like <ref refid="class_q_c_p_axis" kindref="compound">QCPAxis</ref>). This way, a possibly complex calculation to decide which part was clicked is only done once in <ref refid="class_q_c_p_financial_1a77bffad8f3fcbcccbef03ead1c538e3a" kindref="member">selectTest</ref>. The result (i.e. the actually clicked part) can then be placed in <emphasis>details</emphasis>. So in the subsequent <ref refid="class_q_c_p_abstract_plottable_1a16aaad02456aa23a759efd1ac90c79bf" kindref="member">selectEvent</ref>, the decision which part was selected doesn&apos;t have to be done a second time for a single selection operation.</para>
<para>You may pass 0 as <emphasis>details</emphasis> to indicate that you are not interested in those selection details.</para>
<para><simplesect kind="see"><para><ref refid="class_q_c_p_abstract_plottable_1a16aaad02456aa23a759efd1ac90c79bf" kindref="member">selectEvent</ref>, <ref refid="class_q_c_p_abstract_plottable_1a6fa0d0f95560ea8b01ee13f296dab2b1" kindref="member">deselectEvent</ref>, <ref refid="class_q_custom_plot_1a5ee1e2f6ae27419deca53e75907c27e5" kindref="member">QCustomPlot::setInteractions</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3205" column="18" bodyfile="qcustomplot.cpp" bodystart="20926" bodyend="20950"/>
        <references refid="class_q_c_p_financial_1a6fa1e18f18b37d3a0502b97d864a6d15" compoundref="qcustomplot_8cpp" startline="21359" endline="21417">candlestickSelectTest</references>
        <references refid="class_q_c_p_financial_1a0f800e21ee98d646dfc6f8f89d10ebfbac803cbd39f26e3f206bcc7028679e62f" compoundref="qcustomplot_8h" startline="3164">csCandlestick</references>
        <references refid="class_q_c_p_financial_1a0f800e21ee98d646dfc6f8f89d10ebfba3a516016c9298d3e95dd82aa203c4390" compoundref="qcustomplot_8h" startline="3163">csOhlc</references>
        <references refid="class_q_c_p_financial_1ab74167a55319771c5da0e06406c2c2f2" compoundref="qcustomplot_8cpp" startline="21435" endline="21453">getVisibleDataBounds</references>
        <references refid="class_q_c_p_financial_1ab65c2ce8d6354451870bb44b894c1e92" compoundref="qcustomplot_8h" startline="3213">mChartStyle</references>
        <references refid="class_q_c_p_financial_1a475f63587ca1077d8c30aaf2b71ae026" compoundref="qcustomplot_8h" startline="3212">mData</references>
        <references refid="class_q_c_p_abstract_plottable_1a426f42e254d0f8ce5436a868c61a6827" compoundref="qcustomplot_8h" startline="1465">QCPAbstractPlottable::mKeyAxis</references>
        <references refid="class_q_c_p_abstract_plottable_1aceee52342c8e75727abcbd164986fdcb" compoundref="qcustomplot_8h" startline="1466">QCPAbstractPlottable::mSelectable</references>
        <references refid="class_q_c_p_abstract_plottable_1a2901452ca4aea911a1827717934a4bda" compoundref="qcustomplot_8h" startline="1465">QCPAbstractPlottable::mValueAxis</references>
        <references refid="class_q_c_p_financial_1a9df2d86e6ad3b58b51798d720e0f4739" compoundref="qcustomplot_8cpp" startline="21321" endline="21351">ohlcSelectTest</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_q_c_p_financial_1a0c3453d1c03e320950fdd2df54e3ebc8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="qcustomplot_8h_1a745c09823fae0974b50beca9bc3b3d7d" kindref="member">QCPFinancialDataMap</ref></type>
        <definition>QCPFinancialDataMap QCPFinancial::timeSeriesToOhlc</definition>
        <argsstring>(const QVector&lt; double &gt; &amp;time, const QVector&lt; double &gt; &amp;value, double timeBinSize, double timeBinOffset=0)</argsstring>
        <name>timeSeriesToOhlc</name>
        <param>
          <type>const QVector&lt; double &gt; &amp;</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const QVector&lt; double &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>double</type>
          <declname>timeBinSize</declname>
        </param>
        <param>
          <type>double</type>
          <declname>timeBinOffset</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A convenience function that converts time series data (<emphasis>value</emphasis> against <emphasis>time</emphasis>) to OHLC binned data points. The return value can then be passed on to <ref refid="class_q_c_p_financial_1adf12a86082f1e488df6a4e8603f8fd6d" kindref="member">setData</ref>.</para>
<para>The size of the bins can be controlled with <emphasis>timeBinSize</emphasis> in the same units as <emphasis>time</emphasis> is given. For example, if the unit of <emphasis>time</emphasis> is seconds and single OHLC/Candlesticks should span an hour each, set <emphasis>timeBinSize</emphasis> to 3600.</para>
<para><emphasis>timeBinOffset</emphasis> allows to control precisely at what <emphasis>time</emphasis> coordinate a bin should start. The value passed as <emphasis>timeBinOffset</emphasis> doesn&apos;t need to be in the range encompassed by the <emphasis>time</emphasis> keys. It merely defines the mathematical offset/phase of the bins that will be used to process the data. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3208" column="30" bodyfile="qcustomplot.cpp" bodystart="20965" bodyend="21002"/>
        <references refid="class_q_c_p_financial_data_1a45e9b96944c4a08ea6c82a72d3d22df2" compoundref="qcustomplot_8h" startline="3129">QCPFinancialData::close</references>
        <references refid="class_q_c_p_financial_data_1a299a4b241296fb6cd1baf5ab03f7126a" compoundref="qcustomplot_8h" startline="3129">QCPFinancialData::high</references>
        <references refid="class_q_c_p_financial_data_1a18bc92126f28c214b05b0161e5f5958b" compoundref="qcustomplot_8h" startline="3129">QCPFinancialData::key</references>
        <references refid="class_q_c_p_financial_data_1aecce0fb45a115e3f3a25eea78491ac16" compoundref="qcustomplot_8h" startline="3129">QCPFinancialData::low</references>
        <references refid="class_q_c_p_financial_data_1a3059e1e1fbcb9fd243fde0450f238032" compoundref="qcustomplot_8h" startline="3129">QCPFinancialData::open</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_q_c_p_financial_1ad71a59a1b42616594831e04e52c92120" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QCPFinancial::draw</definition>
        <argsstring>(QCPPainter *painter)</argsstring>
        <name>draw</name>
        <reimplements refid="class_q_c_p_abstract_plottable_1acbab5e30dcd04fd302b4a5902ac2c482">draw</reimplements>
        <param>
          <type><ref refid="class_q_c_p_painter" kindref="compound">QCPPainter</ref> *</type>
          <declname>painter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3220" column="16" bodyfile="qcustomplot.cpp" bodystart="21005" bodyend="21021"/>
        <references refid="class_q_c_p_financial_1a0f800e21ee98d646dfc6f8f89d10ebfbac803cbd39f26e3f206bcc7028679e62f" compoundref="qcustomplot_8h" startline="3164">csCandlestick</references>
        <references refid="class_q_c_p_financial_1a0f800e21ee98d646dfc6f8f89d10ebfba3a516016c9298d3e95dd82aa203c4390" compoundref="qcustomplot_8h" startline="3163">csOhlc</references>
        <references refid="class_q_c_p_financial_1a71f5081da0e5ab9c40a488ad40cff122" compoundref="qcustomplot_8cpp" startline="21230" endline="21314">drawCandlestickPlot</references>
        <references refid="class_q_c_p_financial_1a3c3007a7434e29d042c77ccf4f497e66" compoundref="qcustomplot_8cpp" startline="21169" endline="21222">drawOhlcPlot</references>
        <references refid="class_q_c_p_financial_1ab74167a55319771c5da0e06406c2c2f2" compoundref="qcustomplot_8cpp" startline="21435" endline="21453">getVisibleDataBounds</references>
        <references refid="class_q_c_p_financial_1ab65c2ce8d6354451870bb44b894c1e92" compoundref="qcustomplot_8h" startline="3213">mChartStyle</references>
        <references refid="class_q_c_p_financial_1a475f63587ca1077d8c30aaf2b71ae026" compoundref="qcustomplot_8h" startline="3212">mData</references>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_financial_1a474a3994b081892f1dbdd1162e055b96" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void QCPFinancial::drawLegendIcon</definition>
        <argsstring>(QCPPainter *painter, const QRectF &amp;rect) const</argsstring>
        <name>drawLegendIcon</name>
        <reimplements refid="class_q_c_p_abstract_plottable_1a9a450783fd9ed539e589999fd390cdf7">drawLegendIcon</reimplements>
        <param>
          <type><ref refid="class_q_c_p_painter" kindref="compound">QCPPainter</ref> *</type>
          <declname>painter</declname>
        </param>
        <param>
          <type>const QRectF &amp;</type>
          <declname>rect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3221" column="16" bodyfile="qcustomplot.cpp" bodystart="21024" bodyend="21080"/>
        <references refid="class_q_c_p_financial_1a0f800e21ee98d646dfc6f8f89d10ebfbac803cbd39f26e3f206bcc7028679e62f" compoundref="qcustomplot_8h" startline="3164">csCandlestick</references>
        <references refid="class_q_c_p_financial_1a0f800e21ee98d646dfc6f8f89d10ebfba3a516016c9298d3e95dd82aa203c4390" compoundref="qcustomplot_8h" startline="3163">csOhlc</references>
        <references refid="class_q_c_p_painter_1a0b4b1b9bd495e182c731774dc800e6e0" compoundref="qcustomplot_8cpp" startline="129" endline="135">QCPPainter::drawLine</references>
        <references refid="class_q_c_p_abstract_plottable_1a33f00674c0161c13315ab9da0895418e" compoundref="qcustomplot_8h" startline="1464">QCPAbstractPlottable::mBrush</references>
        <references refid="class_q_c_p_financial_1acb0e31874b7a1deb56bd42e8ab3e68f2" compoundref="qcustomplot_8h" startline="3216">mBrushNegative</references>
        <references refid="class_q_c_p_financial_1ab7e6eed16260a2f88ca6bd940dffea79" compoundref="qcustomplot_8h" startline="3216">mBrushPositive</references>
        <references refid="class_q_c_p_financial_1ab65c2ce8d6354451870bb44b894c1e92" compoundref="qcustomplot_8h" startline="3213">mChartStyle</references>
        <references refid="class_q_c_p_abstract_plottable_1a67bc0622fd1b9fa14e54c14922dcec66" compoundref="qcustomplot_8h" startline="1463">QCPAbstractPlottable::mPen</references>
        <references refid="class_q_c_p_financial_1a263fbfefde2cc19c8d4024a8319c2bbb" compoundref="qcustomplot_8h" startline="3217">mPenNegative</references>
        <references refid="class_q_c_p_financial_1aa6599186f417ba615caebb3f6c762bd8" compoundref="qcustomplot_8h" startline="3217">mPenPositive</references>
        <references refid="class_q_c_p_financial_1a6afe919190b884d9bac026cefcc8c0a8" compoundref="qcustomplot_8h" startline="3215">mTwoColored</references>
        <references refid="class_q_c_p_painter_1aaba1deb9188244d9ea65b035112b4d05" compoundref="qcustomplot_8cpp" startline="143" endline="157">QCPPainter::setAntialiasing</references>
        <references refid="class_q_c_p_painter_1af9c7a4cd1791403901f8c5b82a150195" compoundref="qcustomplot_8cpp" startline="86" endline="91">QCPPainter::setPen</references>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_financial_1a13da88ffd42ad192a672d54f3f233d15" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_q_c_p_range" kindref="compound">QCPRange</ref></type>
        <definition>QCPRange QCPFinancial::getKeyRange</definition>
        <argsstring>(bool &amp;foundRange, SignDomain inSignDomain=sdBoth) const</argsstring>
        <name>getKeyRange</name>
        <reimplements refid="class_q_c_p_abstract_plottable_1a345d702b2e7e12c8cfdddff65ba85e8c">getKeyRange</reimplements>
        <param>
          <type>bool &amp;</type>
          <declname>foundRange</declname>
        </param>
        <param>
          <type><ref refid="class_q_c_p_abstract_plottable_1a661743478a1d3c09d28ec2711d7653d8" kindref="member">SignDomain</ref></type>
          <declname>inSignDomain</declname>
          <defval><ref refid="class_q_c_p_abstract_plottable_1a661743478a1d3c09d28ec2711d7653d8a082b98cfb91a7363a3b5cd17b0c1cd60" kindref="member">sdBoth</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3222" column="20" bodyfile="qcustomplot.cpp" bodystart="21083" bodyend="21116"/>
        <references refid="class_q_c_p_range_1aa3aca3edb14f7ca0c85d912647b91745" compoundref="qcustomplot_8h" startline="479">QCPRange::lower</references>
        <references refid="class_q_c_p_financial_1a475f63587ca1077d8c30aaf2b71ae026" compoundref="qcustomplot_8h" startline="3212">mData</references>
        <references refid="class_q_c_p_abstract_plottable_1a426f42e254d0f8ce5436a868c61a6827" compoundref="qcustomplot_8h" startline="1465">QCPAbstractPlottable::mKeyAxis</references>
        <references refid="class_q_c_p_financial_1af630e5eb8485146b9c777e63fd1cf993" compoundref="qcustomplot_8h" startline="3214">mWidth</references>
        <references refid="class_q_c_p_abstract_plottable_1a661743478a1d3c09d28ec2711d7653d8a082b98cfb91a7363a3b5cd17b0c1cd60" compoundref="qcustomplot_8h" startline="1456">QCPAbstractPlottable::sdBoth</references>
        <references refid="class_q_c_p_abstract_plottable_1a661743478a1d3c09d28ec2711d7653d8a0fc9a70796ef60ad18ddd18056e6dc63" compoundref="qcustomplot_8h" startline="1455">QCPAbstractPlottable::sdNegative</references>
        <references refid="class_q_c_p_abstract_plottable_1a661743478a1d3c09d28ec2711d7653d8a02951859f243a4d24e779cfbb5471030" compoundref="qcustomplot_8h" startline="1457">QCPAbstractPlottable::sdPositive</references>
        <references refid="class_q_c_p_range_1ae44eb3aafe1d0e2ed34b499b6d2e074f" compoundref="qcustomplot_8h" startline="479">QCPRange::upper</references>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_financial_1a91c698076647d58223f49e7248d1487e" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_q_c_p_range" kindref="compound">QCPRange</ref></type>
        <definition>QCPRange QCPFinancial::getValueRange</definition>
        <argsstring>(bool &amp;foundRange, SignDomain inSignDomain=sdBoth) const</argsstring>
        <name>getValueRange</name>
        <reimplements refid="class_q_c_p_abstract_plottable_1aa3331b415b5939fe4df60b78831b2799">getValueRange</reimplements>
        <param>
          <type>bool &amp;</type>
          <declname>foundRange</declname>
        </param>
        <param>
          <type><ref refid="class_q_c_p_abstract_plottable_1a661743478a1d3c09d28ec2711d7653d8" kindref="member">SignDomain</ref></type>
          <declname>inSignDomain</declname>
          <defval><ref refid="class_q_c_p_abstract_plottable_1a661743478a1d3c09d28ec2711d7653d8a082b98cfb91a7363a3b5cd17b0c1cd60" kindref="member">sdBoth</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3223" column="20" bodyfile="qcustomplot.cpp" bodystart="21119" bodyend="21161"/>
        <references refid="class_q_c_p_range_1aa3aca3edb14f7ca0c85d912647b91745" compoundref="qcustomplot_8h" startline="479">QCPRange::lower</references>
        <references refid="class_q_c_p_financial_1a475f63587ca1077d8c30aaf2b71ae026" compoundref="qcustomplot_8h" startline="3212">mData</references>
        <references refid="class_q_c_p_abstract_plottable_1a661743478a1d3c09d28ec2711d7653d8a082b98cfb91a7363a3b5cd17b0c1cd60" compoundref="qcustomplot_8h" startline="1456">QCPAbstractPlottable::sdBoth</references>
        <references refid="class_q_c_p_abstract_plottable_1a661743478a1d3c09d28ec2711d7653d8a0fc9a70796ef60ad18ddd18056e6dc63" compoundref="qcustomplot_8h" startline="1455">QCPAbstractPlottable::sdNegative</references>
        <references refid="class_q_c_p_abstract_plottable_1a661743478a1d3c09d28ec2711d7653d8a02951859f243a4d24e779cfbb5471030" compoundref="qcustomplot_8h" startline="1457">QCPAbstractPlottable::sdPositive</references>
        <references refid="class_q_c_p_range_1ae44eb3aafe1d0e2ed34b499b6d2e074f" compoundref="qcustomplot_8h" startline="479">QCPRange::upper</references>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_financial_1a3c3007a7434e29d042c77ccf4f497e66" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPFinancial::drawOhlcPlot</definition>
        <argsstring>(QCPPainter *painter, const QCPFinancialDataMap::const_iterator &amp;begin, const QCPFinancialDataMap::const_iterator &amp;end)</argsstring>
        <name>drawOhlcPlot</name>
        <param>
          <type><ref refid="class_q_c_p_painter" kindref="compound">QCPPainter</ref> *</type>
          <declname>painter</declname>
        </param>
        <param>
          <type>const QCPFinancialDataMap::const_iterator &amp;</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>const QCPFinancialDataMap::const_iterator &amp;</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3226" column="8" bodyfile="qcustomplot.cpp" bodystart="21169" bodyend="21222"/>
        <references refid="class_q_c_p_axis_1af15d1b3a7f7e9b53d759d3ccff1fe4b4" compoundref="qcustomplot_8cpp" startline="5324" endline="5371">QCPAxis::coordToPixel</references>
        <references refid="class_q_c_p_painter_1a0b4b1b9bd495e182c731774dc800e6e0" compoundref="qcustomplot_8cpp" startline="129" endline="135">QCPPainter::drawLine</references>
        <references refid="class_q_c_p_abstract_plottable_1a2cdd6f0dd5e9a979037f86b4000d9cfe" compoundref="qcustomplot_8h" startline="1417" endline="1417">QCPAbstractPlottable::keyAxis</references>
        <references refid="class_q_c_p_abstract_plottable_1a426f42e254d0f8ce5436a868c61a6827" compoundref="qcustomplot_8h" startline="1465">QCPAbstractPlottable::mKeyAxis</references>
        <references refid="class_q_c_p_abstract_plottable_1a67bc0622fd1b9fa14e54c14922dcec66" compoundref="qcustomplot_8h" startline="1463">QCPAbstractPlottable::mPen</references>
        <references refid="class_q_c_p_financial_1a263fbfefde2cc19c8d4024a8319c2bbb" compoundref="qcustomplot_8h" startline="3217">mPenNegative</references>
        <references refid="class_q_c_p_financial_1aa6599186f417ba615caebb3f6c762bd8" compoundref="qcustomplot_8h" startline="3217">mPenPositive</references>
        <references refid="class_q_c_p_abstract_plottable_1a43f68a0603e9bcd016bdfa6d9d5c41c9" compoundref="qcustomplot_8h" startline="1466">QCPAbstractPlottable::mSelected</references>
        <references refid="class_q_c_p_abstract_plottable_1a10619472f5d5e10e9519a599f1cf5576" compoundref="qcustomplot_8h" startline="1463">QCPAbstractPlottable::mSelectedPen</references>
        <references refid="class_q_c_p_financial_1a6afe919190b884d9bac026cefcc8c0a8" compoundref="qcustomplot_8h" startline="3215">mTwoColored</references>
        <references refid="class_q_c_p_abstract_plottable_1a2901452ca4aea911a1827717934a4bda" compoundref="qcustomplot_8h" startline="1465">QCPAbstractPlottable::mValueAxis</references>
        <references refid="class_q_c_p_financial_1af630e5eb8485146b9c777e63fd1cf993" compoundref="qcustomplot_8h" startline="3214">mWidth</references>
        <references refid="class_q_c_p_axis_1ab988ef4538e2655bb77bd138189cd42e" compoundref="qcustomplot_8h" startline="1206" endline="1206">QCPAxis::orientation</references>
        <references refid="class_q_c_p_painter_1af9c7a4cd1791403901f8c5b82a150195" compoundref="qcustomplot_8cpp" startline="86" endline="91">QCPPainter::setPen</references>
        <references refid="class_q_c_p_abstract_plottable_1af47809a644a68ffd955fb30b01fb4f2f" compoundref="qcustomplot_8h" startline="1418" endline="1418">QCPAbstractPlottable::valueAxis</references>
        <referencedby refid="class_q_c_p_financial_1ad71a59a1b42616594831e04e52c92120" compoundref="qcustomplot_8cpp" startline="21005" endline="21021">draw</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_financial_1a71f5081da0e5ab9c40a488ad40cff122" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPFinancial::drawCandlestickPlot</definition>
        <argsstring>(QCPPainter *painter, const QCPFinancialDataMap::const_iterator &amp;begin, const QCPFinancialDataMap::const_iterator &amp;end)</argsstring>
        <name>drawCandlestickPlot</name>
        <param>
          <type><ref refid="class_q_c_p_painter" kindref="compound">QCPPainter</ref> *</type>
          <declname>painter</declname>
        </param>
        <param>
          <type>const QCPFinancialDataMap::const_iterator &amp;</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>const QCPFinancialDataMap::const_iterator &amp;</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3227" column="8" bodyfile="qcustomplot.cpp" bodystart="21230" bodyend="21314"/>
        <references refid="class_q_c_p_axis_1af15d1b3a7f7e9b53d759d3ccff1fe4b4" compoundref="qcustomplot_8cpp" startline="5324" endline="5371">QCPAxis::coordToPixel</references>
        <references refid="class_q_c_p_painter_1a0b4b1b9bd495e182c731774dc800e6e0" compoundref="qcustomplot_8cpp" startline="129" endline="135">QCPPainter::drawLine</references>
        <references refid="class_q_c_p_abstract_plottable_1a2cdd6f0dd5e9a979037f86b4000d9cfe" compoundref="qcustomplot_8h" startline="1417" endline="1417">QCPAbstractPlottable::keyAxis</references>
        <references refid="class_q_c_p_abstract_plottable_1a33f00674c0161c13315ab9da0895418e" compoundref="qcustomplot_8h" startline="1464">QCPAbstractPlottable::mBrush</references>
        <references refid="class_q_c_p_financial_1acb0e31874b7a1deb56bd42e8ab3e68f2" compoundref="qcustomplot_8h" startline="3216">mBrushNegative</references>
        <references refid="class_q_c_p_financial_1ab7e6eed16260a2f88ca6bd940dffea79" compoundref="qcustomplot_8h" startline="3216">mBrushPositive</references>
        <references refid="class_q_c_p_abstract_plottable_1a426f42e254d0f8ce5436a868c61a6827" compoundref="qcustomplot_8h" startline="1465">QCPAbstractPlottable::mKeyAxis</references>
        <references refid="class_q_c_p_abstract_plottable_1a67bc0622fd1b9fa14e54c14922dcec66" compoundref="qcustomplot_8h" startline="1463">QCPAbstractPlottable::mPen</references>
        <references refid="class_q_c_p_financial_1a263fbfefde2cc19c8d4024a8319c2bbb" compoundref="qcustomplot_8h" startline="3217">mPenNegative</references>
        <references refid="class_q_c_p_financial_1aa6599186f417ba615caebb3f6c762bd8" compoundref="qcustomplot_8h" startline="3217">mPenPositive</references>
        <references refid="class_q_c_p_abstract_plottable_1a43f68a0603e9bcd016bdfa6d9d5c41c9" compoundref="qcustomplot_8h" startline="1466">QCPAbstractPlottable::mSelected</references>
        <references refid="class_q_c_p_abstract_plottable_1aea3c0da30c7a8be23ad5f2d9bca36762" compoundref="qcustomplot_8h" startline="1464">QCPAbstractPlottable::mSelectedBrush</references>
        <references refid="class_q_c_p_abstract_plottable_1a10619472f5d5e10e9519a599f1cf5576" compoundref="qcustomplot_8h" startline="1463">QCPAbstractPlottable::mSelectedPen</references>
        <references refid="class_q_c_p_financial_1a6afe919190b884d9bac026cefcc8c0a8" compoundref="qcustomplot_8h" startline="3215">mTwoColored</references>
        <references refid="class_q_c_p_abstract_plottable_1a2901452ca4aea911a1827717934a4bda" compoundref="qcustomplot_8h" startline="1465">QCPAbstractPlottable::mValueAxis</references>
        <references refid="class_q_c_p_financial_1af630e5eb8485146b9c777e63fd1cf993" compoundref="qcustomplot_8h" startline="3214">mWidth</references>
        <references refid="class_q_c_p_axis_1ab988ef4538e2655bb77bd138189cd42e" compoundref="qcustomplot_8h" startline="1206" endline="1206">QCPAxis::orientation</references>
        <references refid="class_q_c_p_painter_1af9c7a4cd1791403901f8c5b82a150195" compoundref="qcustomplot_8cpp" startline="86" endline="91">QCPPainter::setPen</references>
        <references refid="class_q_c_p_abstract_plottable_1af47809a644a68ffd955fb30b01fb4f2f" compoundref="qcustomplot_8h" startline="1418" endline="1418">QCPAbstractPlottable::valueAxis</references>
        <referencedby refid="class_q_c_p_financial_1ad71a59a1b42616594831e04e52c92120" compoundref="qcustomplot_8cpp" startline="21005" endline="21021">draw</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_financial_1a9df2d86e6ad3b58b51798d720e0f4739" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double QCPFinancial::ohlcSelectTest</definition>
        <argsstring>(const QPointF &amp;pos, const QCPFinancialDataMap::const_iterator &amp;begin, const QCPFinancialDataMap::const_iterator &amp;end) const</argsstring>
        <name>ohlcSelectTest</name>
        <param>
          <type>const QPointF &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const QCPFinancialDataMap::const_iterator &amp;</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>const QCPFinancialDataMap::const_iterator &amp;</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3228" column="10" bodyfile="qcustomplot.cpp" bodystart="21321" bodyend="21351"/>
        <references refid="class_q_c_p_axis_1af15d1b3a7f7e9b53d759d3ccff1fe4b4" compoundref="qcustomplot_8cpp" startline="5324" endline="5371">QCPAxis::coordToPixel</references>
        <references refid="class_q_c_p_abstract_plottable_1af7e992b638c8aa688abceac579bb90d7" compoundref="qcustomplot_8cpp" startline="7360" endline="7379">QCPAbstractPlottable::distSqrToLine</references>
        <references refid="class_q_c_p_abstract_plottable_1a2cdd6f0dd5e9a979037f86b4000d9cfe" compoundref="qcustomplot_8h" startline="1417" endline="1417">QCPAbstractPlottable::keyAxis</references>
        <references refid="class_q_c_p_abstract_plottable_1a426f42e254d0f8ce5436a868c61a6827" compoundref="qcustomplot_8h" startline="1465">QCPAbstractPlottable::mKeyAxis</references>
        <references refid="class_q_c_p_abstract_plottable_1a2901452ca4aea911a1827717934a4bda" compoundref="qcustomplot_8h" startline="1465">QCPAbstractPlottable::mValueAxis</references>
        <references refid="class_q_c_p_axis_1ab988ef4538e2655bb77bd138189cd42e" compoundref="qcustomplot_8h" startline="1206" endline="1206">QCPAxis::orientation</references>
        <references refid="class_q_c_p_abstract_plottable_1af47809a644a68ffd955fb30b01fb4f2f" compoundref="qcustomplot_8h" startline="1418" endline="1418">QCPAbstractPlottable::valueAxis</references>
        <referencedby refid="class_q_c_p_financial_1a77bffad8f3fcbcccbef03ead1c538e3a" compoundref="qcustomplot_8cpp" startline="20926" endline="20950">selectTest</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_financial_1a6fa1e18f18b37d3a0502b97d864a6d15" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double QCPFinancial::candlestickSelectTest</definition>
        <argsstring>(const QPointF &amp;pos, const QCPFinancialDataMap::const_iterator &amp;begin, const QCPFinancialDataMap::const_iterator &amp;end) const</argsstring>
        <name>candlestickSelectTest</name>
        <param>
          <type>const QPointF &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const QCPFinancialDataMap::const_iterator &amp;</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>const QCPFinancialDataMap::const_iterator &amp;</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3229" column="10" bodyfile="qcustomplot.cpp" bodystart="21359" bodyend="21417"/>
        <references refid="class_q_c_p_range_1ae9842b48b6d38dc5e9607358e3083cc8" compoundref="qcustomplot_8cpp" startline="1446" endline="1449">QCPRange::contains</references>
        <references refid="class_q_c_p_axis_1af15d1b3a7f7e9b53d759d3ccff1fe4b4" compoundref="qcustomplot_8cpp" startline="5324" endline="5371">QCPAxis::coordToPixel</references>
        <references refid="class_q_c_p_abstract_plottable_1af7e992b638c8aa688abceac579bb90d7" compoundref="qcustomplot_8cpp" startline="7360" endline="7379">QCPAbstractPlottable::distSqrToLine</references>
        <references refid="class_q_c_p_abstract_plottable_1a2cdd6f0dd5e9a979037f86b4000d9cfe" compoundref="qcustomplot_8h" startline="1417" endline="1417">QCPAbstractPlottable::keyAxis</references>
        <references refid="class_q_c_p_abstract_plottable_1a426f42e254d0f8ce5436a868c61a6827" compoundref="qcustomplot_8h" startline="1465">QCPAbstractPlottable::mKeyAxis</references>
        <references refid="class_q_c_p_layerable_1aa2a528433e44db02b8aef23c1f9f90ed" compoundref="qcustomplot_8h" startline="447">QCPLayerable::mParentPlot</references>
        <references refid="class_q_c_p_abstract_plottable_1a2901452ca4aea911a1827717934a4bda" compoundref="qcustomplot_8h" startline="1465">QCPAbstractPlottable::mValueAxis</references>
        <references refid="class_q_c_p_financial_1af630e5eb8485146b9c777e63fd1cf993" compoundref="qcustomplot_8h" startline="3214">mWidth</references>
        <references refid="class_q_c_p_axis_1ab988ef4538e2655bb77bd138189cd42e" compoundref="qcustomplot_8h" startline="1206" endline="1206">QCPAxis::orientation</references>
        <references refid="class_q_c_p_abstract_plottable_1a3903c1120ab5c27e7fa46b597ef267bd" compoundref="qcustomplot_8cpp" startline="7237" endline="7252">QCPAbstractPlottable::pixelsToCoords</references>
        <references refid="class_q_custom_plot_1a5441d11013afeaf4b8f2ea06e8624a25" compoundref="qcustomplot_8h" startline="1728" endline="1728">QCustomPlot::selectionTolerance</references>
        <references refid="class_q_c_p_abstract_plottable_1af47809a644a68ffd955fb30b01fb4f2f" compoundref="qcustomplot_8h" startline="1418" endline="1418">QCPAbstractPlottable::valueAxis</references>
        <referencedby refid="class_q_c_p_financial_1a77bffad8f3fcbcccbef03ead1c538e3a" compoundref="qcustomplot_8cpp" startline="20926" endline="20950">selectTest</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_q_c_p_financial_1ab74167a55319771c5da0e06406c2c2f2" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QCPFinancial::getVisibleDataBounds</definition>
        <argsstring>(QCPFinancialDataMap::const_iterator &amp;lower, QCPFinancialDataMap::const_iterator &amp;upper) const</argsstring>
        <name>getVisibleDataBounds</name>
        <param>
          <type>QCPFinancialDataMap::const_iterator &amp;</type>
          <declname>lower</declname>
        </param>
        <param>
          <type>QCPFinancialDataMap::const_iterator &amp;</type>
          <declname>upper</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="qcustomplot.h" line="3230" column="8" bodyfile="qcustomplot.cpp" bodystart="21435" bodyend="21453"/>
        <references refid="class_q_c_p_financial_1a475f63587ca1077d8c30aaf2b71ae026" compoundref="qcustomplot_8h" startline="3212">mData</references>
        <references refid="class_q_c_p_abstract_plottable_1a426f42e254d0f8ce5436a868c61a6827" compoundref="qcustomplot_8h" startline="1465">QCPAbstractPlottable::mKeyAxis</references>
        <referencedby refid="class_q_c_p_financial_1ad71a59a1b42616594831e04e52c92120" compoundref="qcustomplot_8cpp" startline="21005" endline="21021">draw</referencedby>
        <referencedby refid="class_q_c_p_financial_1a77bffad8f3fcbcccbef03ead1c538e3a" compoundref="qcustomplot_8cpp" startline="20926" endline="20950">selectTest</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A plottable representing a financial stock chart. </para>
    </briefdescription>
    <detaileddescription>
<para><image type="html" name="QCPFinancial.png"></image>
</para>
<para>This plottable represents time series data binned to certain intervals, mainly used for stock charts. The two common representations OHLC (Open-High-Low-Close) bars and Candlesticks can be set via <ref refid="class_q_c_p_financial_1a5a59175d36279d71596e64d7bb65596f" kindref="member">setChartStyle</ref>.</para>
<para>The data is passed via <ref refid="class_q_c_p_financial_1adf12a86082f1e488df6a4e8603f8fd6d" kindref="member">setData</ref> as a set of open/high/low/close values at certain keys (typically times). This means the data must be already binned appropriately. If data is only available as a series of values (e.g. <emphasis>price</emphasis> against <emphasis>time</emphasis>), you can use the static convenience function <ref refid="class_q_c_p_financial_1a0c3453d1c03e320950fdd2df54e3ebc8" kindref="member">timeSeriesToOhlc</ref> to generate binned OHLC-data which can then be passed to <ref refid="class_q_c_p_financial_1adf12a86082f1e488df6a4e8603f8fd6d" kindref="member">setData</ref>.</para>
<para>The width of the OHLC bars/candlesticks can be controlled with <ref refid="class_q_c_p_financial_1a99633f8bac86a61d534ae5eeb1a3068f" kindref="member">setWidth</ref> and is given in plot key coordinates. A typical choice is to set it to (or slightly less than) one bin interval width.</para>
<sect1 id="class_q_c_p_statistical_box_1appearance">
<title>Changing the appearance</title>
<para>Charts can be either single- or two-colored (<ref refid="class_q_c_p_financial_1a138e44aac160a17a9676652e240c5f08" kindref="member">setTwoColored</ref>). If set to be single-colored, lines are drawn with the plottable&apos;s pen (<ref refid="class_q_c_p_abstract_plottable_1ab74b09ae4c0e7e13142fe4b5bf46cac7" kindref="member">setPen</ref>) and fills with the brush (<ref refid="class_q_c_p_abstract_plottable_1a7a4b92144dca6453a1f0f210e27edc74" kindref="member">setBrush</ref>).</para>
<para>If set to two-colored, positive changes of the value during an interval (<emphasis>close</emphasis> &gt;= <emphasis>open</emphasis>) are represented with a different pen and brush than negative changes (<emphasis>close</emphasis> &lt; <emphasis>open</emphasis>). These can be configured with <ref refid="class_q_c_p_financial_1ac58aa3adc7a35aab0088764b840683e5" kindref="member">setPenPositive</ref>, <ref refid="class_q_c_p_financial_1afe5c07e94ccea01a75b3a2476993c346" kindref="member">setPenNegative</ref>, <ref refid="class_q_c_p_financial_1a5ebff2b1764efd07cc44942e67821829" kindref="member">setBrushPositive</ref>, and <ref refid="class_q_c_p_financial_1a8bbdd87629f9144b3ef51af660c0961a" kindref="member">setBrushNegative</ref>. In two-colored mode, the normal plottable pen/brush is ignored. Upon selection however, the normal selected pen/brush (<ref refid="class_q_c_p_abstract_plottable_1a6911603cad23ab0469b108224517516f" kindref="member">setSelectedPen</ref>, <ref refid="class_q_c_p_abstract_plottable_1ae8c816874089f7a44001e8618e81a9dc" kindref="member">setSelectedBrush</ref>) is used, irrespective of whether the chart is single- or two-colored. </para>
</sect1>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>QCPFinancial</label>
        <link refid="class_q_c_p_financial"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QObject</label>
      </node>
      <node id="2">
        <label>QCPAbstractPlottable</label>
        <link refid="class_q_c_p_abstract_plottable"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QCPLayerable</label>
        <link refid="class_q_c_p_layerable"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="17">
        <label>QCPLayoutInset</label>
        <link refid="class_q_c_p_layout_inset"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>QCPLayoutElement</label>
        <link refid="class_q_c_p_layout_element"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>#mParentLayout</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>QCPFinancial</label>
        <link refid="class_q_c_p_financial"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>QObject</label>
      </node>
      <node id="12">
        <label>QCPRange</label>
        <link refid="class_q_c_p_range"/>
      </node>
      <node id="18">
        <label>QCPLegend</label>
        <link refid="class_q_c_p_legend"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>QCPAbstractPlottable</label>
        <link refid="class_q_c_p_abstract_plottable"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>QCPLineEnding</label>
        <link refid="class_q_c_p_line_ending"/>
      </node>
      <node id="9">
        <label>QCPLayout</label>
        <link refid="class_q_c_p_layout"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15">
        <label>QCPGrid</label>
        <link refid="class_q_c_p_grid"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>#mParentAxis</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>QCPAxisPainterPrivate</label>
        <link refid="class_q_c_p_axis_painter_private"/>
        <childnode refid="14" relation="usage">
          <edgelabel>+lowerEnding</edgelabel>
          <edgelabel>+upperEnding</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>#mParentPlot</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>QWidget</label>
      </node>
      <node id="5">
        <label>QCPLayer</label>
        <link refid="class_q_c_p_layer"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>#mParentPlot</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>QCPLayoutGrid</label>
        <link refid="class_q_c_p_layout_grid"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>QCPLayerable</label>
        <link refid="class_q_c_p_layerable"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>#mLayer</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>#mParentPlot</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>QCPAxis</label>
        <link refid="class_q_c_p_axis"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>#mRange</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>#mAxisPainter</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>#mGrid</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>#mAxisRect</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>QCPAxisRect</label>
        <link refid="class_q_c_p_axis_rect"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>#mInsetLayout</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>#mDragStartHorzRange</edgelabel>
          <edgelabel>#mDragStartVertRange</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>QCustomPlot</label>
        <link refid="class_q_custom_plot"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>#mCurrentLayer</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>#mPlotLayout</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>+xAxis</edgelabel>
          <edgelabel>+xAxis2</edgelabel>
          <edgelabel>+yAxis</edgelabel>
          <edgelabel>+yAxis2</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>+legend</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="qcustomplot.h" line="3145" column="1" bodyfile="qcustomplot.h" bodystart="3146" bodyend="3234"/>
    <listofallmembers>
      <member refid="class_q_c_p_financial_1a1a83396f97fcc68f2b7aa8d9782feffe" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>addData</name></member>
      <member refid="class_q_c_p_financial_1a3b6144b48a6a8e63236fc5bf70d40c00" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>addData</name></member>
      <member refid="class_q_c_p_financial_1a688bbd052e00a02954ddb0068b378170" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>addData</name></member>
      <member refid="class_q_c_p_financial_1aa1abe3bdafb297497f09cdbdc4db3958" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>addData</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a70f8cabfd808f7d5204b9f18c45c13f5" prot="public" virt="virtual"><scope>QCPFinancial</scope><name>addToLegend</name></member>
      <member refid="class_q_c_p_layerable_1a71cbd212fde2703cee076e204a475709" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>antialiased</name></member>
      <member refid="class_q_c_p_abstract_plottable_1add06e122d84deb9f451ace9bb8ad9c96" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>antialiasedErrorBars</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a022717896dc57b638a7b5a7be7212ba9" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>antialiasedFill</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a795370db6b1309de0ab60b633efb5ec2" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>antialiasedScatters</name></member>
      <member refid="class_q_c_p_layerable_1acb663e375d2d36dc5c55021ee5a2119b" prot="protected" virt="non-virtual"><scope>QCPFinancial</scope><name>applyAntialiasingHint</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a59a80773c5cefc05a0646ac8e1149ed5" prot="protected" virt="virtual"><scope>QCPFinancial</scope><name>applyDefaultAntialiasingHint</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a0889abc8dbfd357053f40bfafff8bf7d" prot="protected" virt="non-virtual"><scope>QCPFinancial</scope><name>applyErrorBarsAntialiasingHint</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a8d06a59ea23324cce6330ebf2262c0ed" prot="protected" virt="non-virtual"><scope>QCPFinancial</scope><name>applyFillAntialiasingHint</name></member>
      <member refid="class_q_c_p_abstract_plottable_1ac95f26b15a1e5d9c7bd2c0a46d760fc9" prot="protected" virt="non-virtual"><scope>QCPFinancial</scope><name>applyScattersAntialiasingHint</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a893b4896dfd92b68b05b2600b80f5826" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>brush</name></member>
      <member refid="class_q_c_p_financial_1ad4fdc5bc21f5eb17070e043bd4a35f53" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>brushNegative</name></member>
      <member refid="class_q_c_p_financial_1ae922e75f3d5b8854369ac0bf1ebfb053" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>brushPositive</name></member>
      <member refid="class_q_c_p_financial_1a6fa1e18f18b37d3a0502b97d864a6d15" prot="protected" virt="non-virtual"><scope>QCPFinancial</scope><name>candlestickSelectTest</name></member>
      <member refid="class_q_c_p_financial_1a0f800e21ee98d646dfc6f8f89d10ebfb" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>ChartStyle</name></member>
      <member refid="class_q_c_p_financial_1a5243371c1fde30fdae00555d7760ec2d" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>chartStyle</name></member>
      <member refid="class_q_c_p_financial_1a11fd49928c33e55e27b7319c6927864a" prot="public" virt="virtual"><scope>QCPFinancial</scope><name>clearData</name></member>
      <member refid="class_q_c_p_abstract_plottable_1aafb817dbea97d2798967f3371a701413" prot="protected" virt="virtual"><scope>QCPFinancial</scope><name>clipRect</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a7ad84a36472441cf1f555c5683d0da93" prot="protected" virt="non-virtual"><scope>QCPFinancial</scope><name>coordsToPixels</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a5acb50ae984eef09a7ab92315d2ad708" prot="protected" virt="non-virtual"><scope>QCPFinancial</scope><name>coordsToPixels</name></member>
      <member refid="class_q_c_p_financial_1a0f800e21ee98d646dfc6f8f89d10ebfbac803cbd39f26e3f206bcc7028679e62f" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>csCandlestick</name></member>
      <member refid="class_q_c_p_financial_1a0f800e21ee98d646dfc6f8f89d10ebfba3a516016c9298d3e95dd82aa203c4390" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>csOhlc</name></member>
      <member refid="class_q_c_p_financial_1a528c81578e4f25999a9169127763cfd4" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>data</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a6fa0d0f95560ea8b01ee13f296dab2b1" prot="protected" virt="virtual"><scope>QCPFinancial</scope><name>deselectEvent</name></member>
      <member refid="class_q_c_p_abstract_plottable_1af7e992b638c8aa688abceac579bb90d7" prot="protected" virt="non-virtual"><scope>QCPFinancial</scope><name>distSqrToLine</name></member>
      <member refid="class_q_c_p_financial_1ad71a59a1b42616594831e04e52c92120" prot="protected" virt="virtual"><scope>QCPFinancial</scope><name>draw</name></member>
      <member refid="class_q_c_p_financial_1a71f5081da0e5ab9c40a488ad40cff122" prot="protected" virt="non-virtual"><scope>QCPFinancial</scope><name>drawCandlestickPlot</name></member>
      <member refid="class_q_c_p_financial_1a474a3994b081892f1dbdd1162e055b96" prot="protected" virt="virtual"><scope>QCPFinancial</scope><name>drawLegendIcon</name></member>
      <member refid="class_q_c_p_financial_1a3c3007a7434e29d042c77ccf4f497e66" prot="protected" virt="non-virtual"><scope>QCPFinancial</scope><name>drawOhlcPlot</name></member>
      <member refid="class_q_c_p_financial_1a13da88ffd42ad192a672d54f3f233d15" prot="protected" virt="virtual"><scope>QCPFinancial</scope><name>getKeyRange</name></member>
      <member refid="class_q_c_p_financial_1a91c698076647d58223f49e7248d1487e" prot="protected" virt="virtual"><scope>QCPFinancial</scope><name>getValueRange</name></member>
      <member refid="class_q_c_p_financial_1ab74167a55319771c5da0e06406c2c2f2" prot="protected" virt="non-virtual"><scope>QCPFinancial</scope><name>getVisibleDataBounds</name></member>
      <member refid="class_q_c_p_layerable_1a8cbe5a0c9a5674249982f5ca5f8e02bc" prot="protected" virt="non-virtual"><scope>QCPFinancial</scope><name>initializeParentPlot</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a2cdd6f0dd5e9a979037f86b4000d9cfe" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>keyAxis</name></member>
      <member refid="class_q_c_p_layerable_1a5ff4862e8c784c9f5986dbc1533ba2a4" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>layer</name></member>
      <member refid="class_q_c_p_layerable_1abbf8657cedea73ac1c3499b521c90eba" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>layerChanged</name></member>
      <member refid="class_q_c_p_abstract_plottable_1ac9147022a662e92b46c39e7cb821b0af" prot="protected" virt="non-virtual"><scope>QCPFinancial</scope><name>mainBrush</name></member>
      <member refid="class_q_c_p_abstract_plottable_1abd790a3b229239f49067f136633a4b98" prot="protected" virt="non-virtual"><scope>QCPFinancial</scope><name>mainPen</name></member>
      <member refid="class_q_c_p_layerable_1a3ab45a4c76a3333ce42eb217a81733ec" prot="protected" virt="non-virtual"><scope>QCPFinancial</scope><name>mAntialiased</name></member>
      <member refid="class_q_c_p_abstract_plottable_1ad48660b2bd301576e92fb033d8f455ea" prot="protected" virt="non-virtual"><scope>QCPFinancial</scope><name>mAntialiasedErrorBars</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a152ac765bedf927fb240545d11d453ea" prot="protected" virt="non-virtual"><scope>QCPFinancial</scope><name>mAntialiasedFill</name></member>
      <member refid="class_q_c_p_abstract_plottable_1aa115755e525a8e3a86dc683f9cab755b" prot="protected" virt="non-virtual"><scope>QCPFinancial</scope><name>mAntialiasedScatters</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a33f00674c0161c13315ab9da0895418e" prot="protected" virt="non-virtual"><scope>QCPFinancial</scope><name>mBrush</name></member>
      <member refid="class_q_c_p_financial_1acb0e31874b7a1deb56bd42e8ab3e68f2" prot="protected" virt="non-virtual"><scope>QCPFinancial</scope><name>mBrushNegative</name></member>
      <member refid="class_q_c_p_financial_1ab7e6eed16260a2f88ca6bd940dffea79" prot="protected" virt="non-virtual"><scope>QCPFinancial</scope><name>mBrushPositive</name></member>
      <member refid="class_q_c_p_financial_1ab65c2ce8d6354451870bb44b894c1e92" prot="protected" virt="non-virtual"><scope>QCPFinancial</scope><name>mChartStyle</name></member>
      <member refid="class_q_c_p_financial_1a475f63587ca1077d8c30aaf2b71ae026" prot="protected" virt="non-virtual"><scope>QCPFinancial</scope><name>mData</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a426f42e254d0f8ce5436a868c61a6827" prot="protected" virt="non-virtual"><scope>QCPFinancial</scope><name>mKeyAxis</name></member>
      <member refid="class_q_c_p_layerable_1aa38ec5891aff0f50b36fd63e9372a0cd" prot="protected" virt="non-virtual"><scope>QCPFinancial</scope><name>mLayer</name></member>
      <member refid="class_q_c_p_abstract_plottable_1ac29ffef424e2488675930de18cde612a" prot="protected" virt="non-virtual"><scope>QCPFinancial</scope><name>mName</name></member>
      <member refid="class_q_c_p_layerable_1af94484cfb7cbbddb7de522e9be71d9a4" prot="protected" virt="non-virtual"><scope>QCPFinancial</scope><name>moveToLayer</name></member>
      <member refid="class_q_c_p_layerable_1a3291445a980053e2d17a21d15957624e" prot="protected" virt="non-virtual"><scope>QCPFinancial</scope><name>mParentLayerable</name></member>
      <member refid="class_q_c_p_layerable_1aa2a528433e44db02b8aef23c1f9f90ed" prot="protected" virt="non-virtual"><scope>QCPFinancial</scope><name>mParentPlot</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a67bc0622fd1b9fa14e54c14922dcec66" prot="protected" virt="non-virtual"><scope>QCPFinancial</scope><name>mPen</name></member>
      <member refid="class_q_c_p_financial_1a263fbfefde2cc19c8d4024a8319c2bbb" prot="protected" virt="non-virtual"><scope>QCPFinancial</scope><name>mPenNegative</name></member>
      <member refid="class_q_c_p_financial_1aa6599186f417ba615caebb3f6c762bd8" prot="protected" virt="non-virtual"><scope>QCPFinancial</scope><name>mPenPositive</name></member>
      <member refid="class_q_c_p_abstract_plottable_1aceee52342c8e75727abcbd164986fdcb" prot="protected" virt="non-virtual"><scope>QCPFinancial</scope><name>mSelectable</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a43f68a0603e9bcd016bdfa6d9d5c41c9" prot="protected" virt="non-virtual"><scope>QCPFinancial</scope><name>mSelected</name></member>
      <member refid="class_q_c_p_abstract_plottable_1aea3c0da30c7a8be23ad5f2d9bca36762" prot="protected" virt="non-virtual"><scope>QCPFinancial</scope><name>mSelectedBrush</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a10619472f5d5e10e9519a599f1cf5576" prot="protected" virt="non-virtual"><scope>QCPFinancial</scope><name>mSelectedPen</name></member>
      <member refid="class_q_c_p_financial_1a6afe919190b884d9bac026cefcc8c0a8" prot="protected" virt="non-virtual"><scope>QCPFinancial</scope><name>mTwoColored</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a2901452ca4aea911a1827717934a4bda" prot="protected" virt="non-virtual"><scope>QCPFinancial</scope><name>mValueAxis</name></member>
      <member refid="class_q_c_p_layerable_1a62e3aed8427d6ce3ccf716f285106cb3" prot="protected" virt="non-virtual"><scope>QCPFinancial</scope><name>mVisible</name></member>
      <member refid="class_q_c_p_financial_1af630e5eb8485146b9c777e63fd1cf993" prot="protected" virt="non-virtual"><scope>QCPFinancial</scope><name>mWidth</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a52c226eefcb1920240eeabae574d28c0" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>name</name></member>
      <member refid="class_q_c_p_financial_1a9df2d86e6ad3b58b51798d720e0f4739" prot="protected" virt="non-virtual"><scope>QCPFinancial</scope><name>ohlcSelectTest</name></member>
      <member refid="class_q_c_p_layerable_1aa78b7e644d2c519e1a9a6f2ac5fcd858" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>parentLayerable</name></member>
      <member refid="class_q_c_p_layerable_1a473edb813a4c1929d6b6a8fe3ff3faf7" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>parentPlot</name></member>
      <member refid="class_q_c_p_layerable_1ab20b7dbd8e0249ed61adb9622c427382" prot="protected" virt="virtual"><scope>QCPFinancial</scope><name>parentPlotInitialized</name></member>
      <member refid="class_q_c_p_abstract_plottable_1ad5972efc31344e5a7a78ab4f8864b2d3" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>pen</name></member>
      <member refid="class_q_c_p_financial_1a25d9a8f256e5ddcba56b6e2e7e968653" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>penNegative</name></member>
      <member refid="class_q_c_p_financial_1ae803fe25fdd6f0acacde4539590795ed" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>penPositive</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a3903c1120ab5c27e7fa46b597ef267bd" prot="protected" virt="non-virtual"><scope>QCPFinancial</scope><name>pixelsToCoords</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a28d32c0062b9450847851ffdee1c5f69" prot="protected" virt="non-virtual"><scope>QCPFinancial</scope><name>pixelsToCoords</name></member>
      <member refid="class_q_c_p_abstract_plottable_1af78a036e40db6f53a31abadc5323715a" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>QCPAbstractPlottable</name></member>
      <member refid="class_q_c_p_financial_1a4702d5248feeb9d1ec6e3ce725b10b32" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>QCPFinancial</name></member>
      <member refid="class_q_c_p_layerable_1a74c0fa237f29bf0e49565013fc5d1ec0" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>QCPLayerable</name></member>
      <member refid="class_q_c_p_financial_1a8429035e7adfbd7f05805a6530ad5e3b" prot="protected" virt="non-virtual"><scope>QCPFinancial</scope><name>QCPLegend</name></member>
      <member refid="class_q_c_p_financial_1a1cdf9df76adcfae45261690aa0ca2198" prot="protected" virt="non-virtual"><scope>QCPFinancial</scope><name>QCustomPlot</name></member>
      <member refid="class_q_c_p_layerable_1ab054e88f15d485defcb95e7376f119e7" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>realVisibility</name></member>
      <member refid="class_q_c_p_financial_1a048c741d3c8cc5709c2c44b759fdf27c" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>removeData</name></member>
      <member refid="class_q_c_p_financial_1ae527d8a11290906b083d1ab598c380ea" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>removeData</name></member>
      <member refid="class_q_c_p_financial_1aa0fcd357005288c833a230c7874825ba" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>removeDataAfter</name></member>
      <member refid="class_q_c_p_financial_1a097c0383c7c1e9042ca7f93cb439d15a" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>removeDataBefore</name></member>
      <member refid="class_q_c_p_abstract_plottable_1ac95fb2604d9106d0852ad9ceb326fe8c" prot="public" virt="virtual"><scope>QCPFinancial</scope><name>removeFromLegend</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a1491c4a606bccd2d09e65e11b79eb882" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>rescaleAxes</name></member>
      <member refid="class_q_c_p_abstract_plottable_1ae96b83c961e257da116c6acf9c7da308" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>rescaleKeyAxis</name></member>
      <member refid="class_q_c_p_abstract_plottable_1aa1e408bb2d13999150c3f7f8a8579ca9" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>rescaleValueAxis</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a661743478a1d3c09d28ec2711d7653d8a082b98cfb91a7363a3b5cd17b0c1cd60" prot="protected" virt="non-virtual"><scope>QCPFinancial</scope><name>sdBoth</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a661743478a1d3c09d28ec2711d7653d8a0fc9a70796ef60ad18ddd18056e6dc63" prot="protected" virt="non-virtual"><scope>QCPFinancial</scope><name>sdNegative</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a661743478a1d3c09d28ec2711d7653d8a02951859f243a4d24e779cfbb5471030" prot="protected" virt="non-virtual"><scope>QCPFinancial</scope><name>sdPositive</name></member>
      <member refid="class_q_c_p_abstract_plottable_1adf896b8a213fea74440c7bc969cf6e4c" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>selectable</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a0059caa3f3581f3959660fef8cbb71c4" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>selectableChanged</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a0b3b514474fe93354fc74cfc144184b4" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>selected</name></member>
      <member refid="class_q_c_p_abstract_plottable_1afe5f3f74b09e89713ba39da04079a337" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>selectedBrush</name></member>
      <member refid="class_q_c_p_abstract_plottable_1aafdfd0946b18364321ffce01cc6045a0" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>selectedPen</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a16aaad02456aa23a759efd1ac90c79bf" prot="protected" virt="virtual"><scope>QCPFinancial</scope><name>selectEvent</name></member>
      <member refid="class_q_c_p_abstract_plottable_1afb5e4718c232a16d0fb06b00e172be9e" prot="protected" virt="virtual"><scope>QCPFinancial</scope><name>selectionCategory</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a3af66432b1dca93b28e00e78a8c7c1d9" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>selectionChanged</name></member>
      <member refid="class_q_c_p_financial_1a77bffad8f3fcbcccbef03ead1c538e3a" prot="public" virt="virtual"><scope>QCPFinancial</scope><name>selectTest</name></member>
      <member refid="class_q_c_p_layerable_1a4fd43e89be4a553ead41652565ff0581" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>setAntialiased</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a757beb744b96cf1855cca5ab9d3ecf52" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>setAntialiasedErrorBars</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a089d6b5577120239b55c39ed27c39536" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>setAntialiasedFill</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a2f03f067ede2ed4da6f7d0e4777a3f02" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>setAntialiasedScatters</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a7a4b92144dca6453a1f0f210e27edc74" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>setBrush</name></member>
      <member refid="class_q_c_p_financial_1a8bbdd87629f9144b3ef51af660c0961a" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>setBrushNegative</name></member>
      <member refid="class_q_c_p_financial_1a5ebff2b1764efd07cc44942e67821829" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>setBrushPositive</name></member>
      <member refid="class_q_c_p_financial_1a5a59175d36279d71596e64d7bb65596f" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>setChartStyle</name></member>
      <member refid="class_q_c_p_financial_1adf12a86082f1e488df6a4e8603f8fd6d" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>setData</name></member>
      <member refid="class_q_c_p_financial_1a886881339d6447432af55adaad748c3c" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>setData</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a8524fa2994c63c0913ebd9bb2ffa3920" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>setKeyAxis</name></member>
      <member refid="class_q_c_p_layerable_1ab0d0da6d2de45a118886d2c8e16d5a54" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>setLayer</name></member>
      <member refid="class_q_c_p_layerable_1ab25a0e7b897993b44447caee0f142083" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>setLayer</name></member>
      <member refid="class_q_c_p_abstract_plottable_1ab79c7ba76bc7fa89a4b3580e12149f1f" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>setName</name></member>
      <member refid="class_q_c_p_layerable_1aa23c893671f1f6744ac235cf2204cf3a" prot="protected" virt="non-virtual"><scope>QCPFinancial</scope><name>setParentLayerable</name></member>
      <member refid="class_q_c_p_abstract_plottable_1ab74b09ae4c0e7e13142fe4b5bf46cac7" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>setPen</name></member>
      <member refid="class_q_c_p_financial_1afe5c07e94ccea01a75b3a2476993c346" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>setPenNegative</name></member>
      <member refid="class_q_c_p_financial_1ac58aa3adc7a35aab0088764b840683e5" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>setPenPositive</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a22c69299eb5569e0f6bf084877a37dc4" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>setSelectable</name></member>
      <member refid="class_q_c_p_abstract_plottable_1afbd5428c2952f59d952e11ab5cd79176" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>setSelected</name></member>
      <member refid="class_q_c_p_abstract_plottable_1ae8c816874089f7a44001e8618e81a9dc" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>setSelectedBrush</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a6911603cad23ab0469b108224517516f" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>setSelectedPen</name></member>
      <member refid="class_q_c_p_financial_1a138e44aac160a17a9676652e240c5f08" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>setTwoColored</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a71626a07367e241ec62ad2c34baf21cb" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>setValueAxis</name></member>
      <member refid="class_q_c_p_layerable_1a3bed99ddc396b48ce3ebfdc0418744f8" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>setVisible</name></member>
      <member refid="class_q_c_p_financial_1a99633f8bac86a61d534ae5eeb1a3068f" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>setWidth</name></member>
      <member refid="class_q_c_p_abstract_plottable_1a661743478a1d3c09d28ec2711d7653d8" prot="protected" virt="non-virtual"><scope>QCPFinancial</scope><name>SignDomain</name></member>
      <member refid="class_q_c_p_financial_1a0c3453d1c03e320950fdd2df54e3ebc8" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>timeSeriesToOhlc</name></member>
      <member refid="class_q_c_p_financial_1afd4b51de5be8e53776b649f9877a50e6" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>twoColored</name></member>
      <member refid="class_q_c_p_abstract_plottable_1af47809a644a68ffd955fb30b01fb4f2f" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>valueAxis</name></member>
      <member refid="class_q_c_p_layerable_1af0297b944b6192b6d67d00bff41b6b70" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>visible</name></member>
      <member refid="class_q_c_p_financial_1a12548f13658eda5833204ef60f524870" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>width</name></member>
      <member refid="class_q_c_p_financial_1ad1fda0d793797b66819fac4682b10f31" prot="public" virt="virtual"><scope>QCPFinancial</scope><name>~QCPFinancial</name></member>
      <member refid="class_q_c_p_layerable_1a4231cf5b3601d6d3a5781283e7a9735b" prot="public" virt="non-virtual"><scope>QCPFinancial</scope><name>~QCPLayerable</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
